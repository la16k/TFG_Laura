# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mikrokopter_driver/OktoSensorData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class OktoSensorData(genpy.Message):
  _md5sum = "cea63b0235f3e3af6759fb0567ec8651"
  _type = "mikrokopter_driver/OktoSensorData"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header 


          int16 integrated_nick         
          int16 integrated_roll        
          int16 mean_acceleration_nick  
          int16 mean_acceleration_roll  
          int16 yaw                     
          int16 height                 
          int16 acceleration_up        
          int16 gas                     
          int16 compass                 
          int16 battery_voltage         
          int16 sensor_ok               
          int16 backup_compass_deg     
          int16 motor_set_points     
          int16 stick_nick              
          int16 stick_roll              
          int16 stick_gier              
          int16 stick_gas             
          int16 servo_nick              
          int16 hover_gas               
          int16 current                 
          int16 capacity_used           
          int16 height_set_point        
          int16 external_control        
          int16 another_unused         
          int16 compass_set_point       
          int16 i2c_error              
          int16 capacity_min_of_max_pwm
          int16 gps_nick               
          int16 gps_roll
                  

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','integrated_nick','integrated_roll','mean_acceleration_nick','mean_acceleration_roll','yaw','height','acceleration_up','gas','compass','battery_voltage','sensor_ok','backup_compass_deg','motor_set_points','stick_nick','stick_roll','stick_gier','stick_gas','servo_nick','hover_gas','current','capacity_used','height_set_point','external_control','another_unused','compass_set_point','i2c_error','capacity_min_of_max_pwm','gps_nick','gps_roll']
  _slot_types = ['std_msgs/Header','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,integrated_nick,integrated_roll,mean_acceleration_nick,mean_acceleration_roll,yaw,height,acceleration_up,gas,compass,battery_voltage,sensor_ok,backup_compass_deg,motor_set_points,stick_nick,stick_roll,stick_gier,stick_gas,servo_nick,hover_gas,current,capacity_used,height_set_point,external_control,another_unused,compass_set_point,i2c_error,capacity_min_of_max_pwm,gps_nick,gps_roll

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OktoSensorData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.integrated_nick is None:
        self.integrated_nick = 0
      if self.integrated_roll is None:
        self.integrated_roll = 0
      if self.mean_acceleration_nick is None:
        self.mean_acceleration_nick = 0
      if self.mean_acceleration_roll is None:
        self.mean_acceleration_roll = 0
      if self.yaw is None:
        self.yaw = 0
      if self.height is None:
        self.height = 0
      if self.acceleration_up is None:
        self.acceleration_up = 0
      if self.gas is None:
        self.gas = 0
      if self.compass is None:
        self.compass = 0
      if self.battery_voltage is None:
        self.battery_voltage = 0
      if self.sensor_ok is None:
        self.sensor_ok = 0
      if self.backup_compass_deg is None:
        self.backup_compass_deg = 0
      if self.motor_set_points is None:
        self.motor_set_points = 0
      if self.stick_nick is None:
        self.stick_nick = 0
      if self.stick_roll is None:
        self.stick_roll = 0
      if self.stick_gier is None:
        self.stick_gier = 0
      if self.stick_gas is None:
        self.stick_gas = 0
      if self.servo_nick is None:
        self.servo_nick = 0
      if self.hover_gas is None:
        self.hover_gas = 0
      if self.current is None:
        self.current = 0
      if self.capacity_used is None:
        self.capacity_used = 0
      if self.height_set_point is None:
        self.height_set_point = 0
      if self.external_control is None:
        self.external_control = 0
      if self.another_unused is None:
        self.another_unused = 0
      if self.compass_set_point is None:
        self.compass_set_point = 0
      if self.i2c_error is None:
        self.i2c_error = 0
      if self.capacity_min_of_max_pwm is None:
        self.capacity_min_of_max_pwm = 0
      if self.gps_nick is None:
        self.gps_nick = 0
      if self.gps_roll is None:
        self.gps_roll = 0
    else:
      self.header = std_msgs.msg.Header()
      self.integrated_nick = 0
      self.integrated_roll = 0
      self.mean_acceleration_nick = 0
      self.mean_acceleration_roll = 0
      self.yaw = 0
      self.height = 0
      self.acceleration_up = 0
      self.gas = 0
      self.compass = 0
      self.battery_voltage = 0
      self.sensor_ok = 0
      self.backup_compass_deg = 0
      self.motor_set_points = 0
      self.stick_nick = 0
      self.stick_roll = 0
      self.stick_gier = 0
      self.stick_gas = 0
      self.servo_nick = 0
      self.hover_gas = 0
      self.current = 0
      self.capacity_used = 0
      self.height_set_point = 0
      self.external_control = 0
      self.another_unused = 0
      self.compass_set_point = 0
      self.i2c_error = 0
      self.capacity_min_of_max_pwm = 0
      self.gps_nick = 0
      self.gps_roll = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_29h().pack(_x.integrated_nick, _x.integrated_roll, _x.mean_acceleration_nick, _x.mean_acceleration_roll, _x.yaw, _x.height, _x.acceleration_up, _x.gas, _x.compass, _x.battery_voltage, _x.sensor_ok, _x.backup_compass_deg, _x.motor_set_points, _x.stick_nick, _x.stick_roll, _x.stick_gier, _x.stick_gas, _x.servo_nick, _x.hover_gas, _x.current, _x.capacity_used, _x.height_set_point, _x.external_control, _x.another_unused, _x.compass_set_point, _x.i2c_error, _x.capacity_min_of_max_pwm, _x.gps_nick, _x.gps_roll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.integrated_nick, _x.integrated_roll, _x.mean_acceleration_nick, _x.mean_acceleration_roll, _x.yaw, _x.height, _x.acceleration_up, _x.gas, _x.compass, _x.battery_voltage, _x.sensor_ok, _x.backup_compass_deg, _x.motor_set_points, _x.stick_nick, _x.stick_roll, _x.stick_gier, _x.stick_gas, _x.servo_nick, _x.hover_gas, _x.current, _x.capacity_used, _x.height_set_point, _x.external_control, _x.another_unused, _x.compass_set_point, _x.i2c_error, _x.capacity_min_of_max_pwm, _x.gps_nick, _x.gps_roll,) = _get_struct_29h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_29h().pack(_x.integrated_nick, _x.integrated_roll, _x.mean_acceleration_nick, _x.mean_acceleration_roll, _x.yaw, _x.height, _x.acceleration_up, _x.gas, _x.compass, _x.battery_voltage, _x.sensor_ok, _x.backup_compass_deg, _x.motor_set_points, _x.stick_nick, _x.stick_roll, _x.stick_gier, _x.stick_gas, _x.servo_nick, _x.hover_gas, _x.current, _x.capacity_used, _x.height_set_point, _x.external_control, _x.another_unused, _x.compass_set_point, _x.i2c_error, _x.capacity_min_of_max_pwm, _x.gps_nick, _x.gps_roll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.integrated_nick, _x.integrated_roll, _x.mean_acceleration_nick, _x.mean_acceleration_roll, _x.yaw, _x.height, _x.acceleration_up, _x.gas, _x.compass, _x.battery_voltage, _x.sensor_ok, _x.backup_compass_deg, _x.motor_set_points, _x.stick_nick, _x.stick_roll, _x.stick_gier, _x.stick_gas, _x.servo_nick, _x.hover_gas, _x.current, _x.capacity_used, _x.height_set_point, _x.external_control, _x.another_unused, _x.compass_set_point, _x.i2c_error, _x.capacity_min_of_max_pwm, _x.gps_nick, _x.gps_roll,) = _get_struct_29h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_29h = None
def _get_struct_29h():
    global _struct_29h
    if _struct_29h is None:
        _struct_29h = struct.Struct("<29h")
    return _struct_29h
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
