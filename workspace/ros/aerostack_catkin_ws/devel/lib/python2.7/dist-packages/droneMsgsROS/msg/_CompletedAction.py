# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from droneMsgsROS/CompletedAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import droneMsgsROS.msg
import genpy

class CompletedAction(genpy.Message):
  _md5sum = "6098c6a56cc231e7d0854dcdb44589e3"
  _type = "droneMsgsROS/CompletedAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#time
time time

#Final state
int32 final_state

#final state possible values
int32 SUCCESSFUL                       = 1
int32 TIMEOUT_ACTIVATED                = 2
int32 INTERRUPTED                      = 3

#Timeout used
int32 timeout

#action
actionData action

================================================================================
MSG: droneMsgsROS/actionData
#time
time time

#ack
bool ack

#MissionPlanner action
int32 mpAction

int32 TAKE_OFF                   = 1
int32 HOVER                      = 2
int32 LAND                       = 3
int32 STABILIZE                  = 4
int32 MOVE                       = 5
int32 GO_TO_POINT                = 6
int32 ROTATE_YAW                 = 7
int32 FLIP                       = 8
int32 FLIP_RIGHT                 = 9
int32 FLIP_LEFT                  = 10
int32 FLIP_FRONT                 = 11
int32 FLIP_BACK                  = 12
int32 FOLLOW_IMAGE               = 13
int32 APPROACH_POINT             = 14

int32 UNKNOWN                    = 100

#Arguments
actionArguments[] arguments
================================================================================
MSG: droneMsgsROS/actionArguments
#Name of the argument that is going to be passed.
int32 argumentName

int32 DURATION                 = 1
int32 DESTINATION              = 2
int32 ROTATION                 = 3
int32 PRECISION                = 4

#Numerical value
float64[] value
"""
  # Pseudo-constants
  SUCCESSFUL = 1
  TIMEOUT_ACTIVATED = 2
  INTERRUPTED = 3

  __slots__ = ['time','final_state','timeout','action']
  _slot_types = ['time','int32','int32','droneMsgsROS/actionData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,final_state,timeout,action

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CompletedAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = genpy.Time()
      if self.final_state is None:
        self.final_state = 0
      if self.timeout is None:
        self.timeout = 0
      if self.action is None:
        self.action = droneMsgsROS.msg.actionData()
    else:
      self.time = genpy.Time()
      self.final_state = 0
      self.timeout = 0
      self.action = droneMsgsROS.msg.actionData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i2IBi().pack(_x.time.secs, _x.time.nsecs, _x.final_state, _x.timeout, _x.action.time.secs, _x.action.time.nsecs, _x.action.ack, _x.action.mpAction))
      length = len(self.action.arguments)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.arguments:
        _x = val1.argumentName
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.value)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.time is None:
        self.time = genpy.Time()
      if self.action is None:
        self.action = droneMsgsROS.msg.actionData()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.time.secs, _x.time.nsecs, _x.final_state, _x.timeout, _x.action.time.secs, _x.action.time.nsecs, _x.action.ack, _x.action.mpAction,) = _get_struct_2I2i2IBi().unpack(str[start:end])
      self.action.ack = bool(self.action.ack)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.arguments = []
      for i in range(0, length):
        val1 = droneMsgsROS.msg.actionArguments()
        start = end
        end += 4
        (val1.argumentName,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.value = struct.unpack(pattern, str[start:end])
        self.action.arguments.append(val1)
      self.time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i2IBi().pack(_x.time.secs, _x.time.nsecs, _x.final_state, _x.timeout, _x.action.time.secs, _x.action.time.nsecs, _x.action.ack, _x.action.mpAction))
      length = len(self.action.arguments)
      buff.write(_struct_I.pack(length))
      for val1 in self.action.arguments:
        _x = val1.argumentName
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.value)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.value.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.time is None:
        self.time = genpy.Time()
      if self.action is None:
        self.action = droneMsgsROS.msg.actionData()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.time.secs, _x.time.nsecs, _x.final_state, _x.timeout, _x.action.time.secs, _x.action.time.nsecs, _x.action.ack, _x.action.mpAction,) = _get_struct_2I2i2IBi().unpack(str[start:end])
      self.action.ack = bool(self.action.ack)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action.arguments = []
      for i in range(0, length):
        val1 = droneMsgsROS.msg.actionArguments()
        start = end
        end += 4
        (val1.argumentName,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.value = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.action.arguments.append(val1)
      self.time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2i2IBi = None
def _get_struct_2I2i2IBi():
    global _struct_2I2i2IBi
    if _struct_2I2i2IBi is None:
        _struct_2I2i2IBi = struct.Struct("<2I2i2IBi")
    return _struct_2I2i2IBi
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
