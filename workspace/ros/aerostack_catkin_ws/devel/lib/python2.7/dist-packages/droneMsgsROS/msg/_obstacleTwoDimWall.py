# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from droneMsgsROS/obstacleTwoDimWall.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class obstacleTwoDimWall(genpy.Message):
  _md5sum = "3d82de645b9a720aeec691a05387e1f6"
  _type = "droneMsgsROS/obstacleTwoDimWall"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#id
int32 id

#position of the center of the obstacle
float32 centerX
float32 centerY

#sizes
float32 sizeX
float32 sizeY


#yaw angle
float32 yawAngle


# flag to determine if the obstacle is real or virtual
bool isVirtual

"""
  __slots__ = ['id','centerX','centerY','sizeX','sizeY','yawAngle','isVirtual']
  _slot_types = ['int32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,centerX,centerY,sizeX,sizeY,yawAngle,isVirtual

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(obstacleTwoDimWall, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.centerX is None:
        self.centerX = 0.
      if self.centerY is None:
        self.centerY = 0.
      if self.sizeX is None:
        self.sizeX = 0.
      if self.sizeY is None:
        self.sizeY = 0.
      if self.yawAngle is None:
        self.yawAngle = 0.
      if self.isVirtual is None:
        self.isVirtual = False
    else:
      self.id = 0
      self.centerX = 0.
      self.centerY = 0.
      self.sizeX = 0.
      self.sizeY = 0.
      self.yawAngle = 0.
      self.isVirtual = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i5fB().pack(_x.id, _x.centerX, _x.centerY, _x.sizeX, _x.sizeY, _x.yawAngle, _x.isVirtual))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.id, _x.centerX, _x.centerY, _x.sizeX, _x.sizeY, _x.yawAngle, _x.isVirtual,) = _get_struct_i5fB().unpack(str[start:end])
      self.isVirtual = bool(self.isVirtual)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i5fB().pack(_x.id, _x.centerX, _x.centerY, _x.sizeX, _x.sizeY, _x.yawAngle, _x.isVirtual))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.id, _x.centerX, _x.centerY, _x.sizeX, _x.sizeY, _x.yawAngle, _x.isVirtual,) = _get_struct_i5fB().unpack(str[start:end])
      self.isVirtual = bool(self.isVirtual)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i5fB = None
def _get_struct_i5fB():
    global _struct_i5fB
    if _struct_i5fB is None:
        _struct_i5fB = struct.Struct("<i5fB")
    return _struct_i5fB
