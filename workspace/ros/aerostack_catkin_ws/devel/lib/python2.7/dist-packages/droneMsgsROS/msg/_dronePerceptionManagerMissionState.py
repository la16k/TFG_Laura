# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from droneMsgsROS/dronePerceptionManagerMissionState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class dronePerceptionManagerMissionState(genpy.Message):
  _md5sum = "9bd07c0d2f53b5a672de39bb19821b00"
  _type = "droneMsgsROS/dronePerceptionManagerMissionState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#time stamp
#Header header

#SubMission state
int32 submission_state

int32 EXPLORING               = 1
int32 PICK_RED_OBJECT         = 2
int32 PICK_BLUE_OBJECT        = 3
int32 RELEASE_RED_OBJECT      = 4
int32 RELEASE_BLUE_OBJECT     = 5
"""
  # Pseudo-constants
  EXPLORING = 1
  PICK_RED_OBJECT = 2
  PICK_BLUE_OBJECT = 3
  RELEASE_RED_OBJECT = 4
  RELEASE_BLUE_OBJECT = 5

  __slots__ = ['submission_state']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       submission_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(dronePerceptionManagerMissionState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.submission_state is None:
        self.submission_state = 0
    else:
      self.submission_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.submission_state
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.submission_state,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.submission_state
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.submission_state,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
