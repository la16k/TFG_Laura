# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from droneMsgsROS/QueryResourcesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class QueryResourcesRequest(genpy.Message):
  _md5sum = "e2f294884a550c39e99e8d799df99b16"
  _type = "droneMsgsROS/QueryResourcesRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This service retrives capabilities associated to a behavior

string behavior_name            # Contains the name of the behavior
"""
  __slots__ = ['behavior_name']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       behavior_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QueryResourcesRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.behavior_name is None:
        self.behavior_name = ''
    else:
      self.behavior_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.behavior_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.behavior_name = str[start:end].decode('utf-8')
      else:
        self.behavior_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.behavior_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.behavior_name = str[start:end].decode('utf-8')
      else:
        self.behavior_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from droneMsgsROS/QueryResourcesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import droneMsgsROS.msg

class QueryResourcesResponse(genpy.Message):
  _md5sum = "c3deb2e4e2e7e13c933d6a0aa96752fb"
  _type = "droneMsgsROS/QueryResourcesResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool found                      # If this value is true, the operation was done succesfully
string error_message            # If the above variable is false, an error is contained inside this variable
Capability[] capabilities       # Contains every capability associated to the behavior


================================================================================
MSG: droneMsgsROS/Capability
# A capability is a group of processes

string name         # capability name
bool basic          # a capability is basic if it is always active
string[] processes  # list of names of processes that belong to the capability
"""
  __slots__ = ['found','error_message','capabilities']
  _slot_types = ['bool','string','droneMsgsROS/Capability[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       found,error_message,capabilities

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QueryResourcesResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.found is None:
        self.found = False
      if self.error_message is None:
        self.error_message = ''
      if self.capabilities is None:
        self.capabilities = []
    else:
      self.found = False
      self.error_message = ''
      self.capabilities = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.found
      buff.write(_get_struct_B().pack(_x))
      _x = self.error_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.capabilities)
      buff.write(_struct_I.pack(length))
      for val1 in self.capabilities:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.basic
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.processes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.processes:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.capabilities is None:
        self.capabilities = None
      end = 0
      start = end
      end += 1
      (self.found,) = _get_struct_B().unpack(str[start:end])
      self.found = bool(self.found)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_message = str[start:end].decode('utf-8')
      else:
        self.error_message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.capabilities = []
      for i in range(0, length):
        val1 = droneMsgsROS.msg.Capability()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 1
        (val1.basic,) = _get_struct_B().unpack(str[start:end])
        val1.basic = bool(val1.basic)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.processes = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.processes.append(val2)
        self.capabilities.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.found
      buff.write(_get_struct_B().pack(_x))
      _x = self.error_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.capabilities)
      buff.write(_struct_I.pack(length))
      for val1 in self.capabilities:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.basic
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.processes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.processes:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.capabilities is None:
        self.capabilities = None
      end = 0
      start = end
      end += 1
      (self.found,) = _get_struct_B().unpack(str[start:end])
      self.found = bool(self.found)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_message = str[start:end].decode('utf-8')
      else:
        self.error_message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.capabilities = []
      for i in range(0, length):
        val1 = droneMsgsROS.msg.Capability()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 1
        (val1.basic,) = _get_struct_B().unpack(str[start:end])
        val1.basic = bool(val1.basic)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.processes = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.processes.append(val2)
        self.capabilities.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class QueryResources(object):
  _type          = 'droneMsgsROS/QueryResources'
  _md5sum = '5b53e8068192241c392d2a289a1da029'
  _request_class  = QueryResourcesRequest
  _response_class = QueryResourcesResponse
