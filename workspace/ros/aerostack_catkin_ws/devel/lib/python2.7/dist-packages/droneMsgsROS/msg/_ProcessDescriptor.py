# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from droneMsgsROS/ProcessDescriptor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import droneMsgsROS.msg
import genpy

class ProcessDescriptor(genpy.Message):
  _md5sum = "4601045a840428aad62d83ebbcac8c8b"
  _type = "droneMsgsROS/ProcessDescriptor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
string hostname
time last_signal
bool is_alive
ProcessState current_state
================================================================================
MSG: droneMsgsROS/ProcessState
uint8 state

uint8 Created=1
uint8 ReadyToStart=2
uint8 Running=3
uint8 Paused=4

uint8 Started=7
uint8 NotStarted=8"""
  __slots__ = ['name','hostname','last_signal','is_alive','current_state']
  _slot_types = ['string','string','time','bool','droneMsgsROS/ProcessState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,hostname,last_signal,is_alive,current_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProcessDescriptor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.hostname is None:
        self.hostname = ''
      if self.last_signal is None:
        self.last_signal = genpy.Time()
      if self.is_alive is None:
        self.is_alive = False
      if self.current_state is None:
        self.current_state = droneMsgsROS.msg.ProcessState()
    else:
      self.name = ''
      self.hostname = ''
      self.last_signal = genpy.Time()
      self.is_alive = False
      self.current_state = droneMsgsROS.msg.ProcessState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.hostname
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I2B().pack(_x.last_signal.secs, _x.last_signal.nsecs, _x.is_alive, _x.current_state.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.last_signal is None:
        self.last_signal = genpy.Time()
      if self.current_state is None:
        self.current_state = droneMsgsROS.msg.ProcessState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hostname = str[start:end].decode('utf-8')
      else:
        self.hostname = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.last_signal.secs, _x.last_signal.nsecs, _x.is_alive, _x.current_state.state,) = _get_struct_2I2B().unpack(str[start:end])
      self.is_alive = bool(self.is_alive)
      self.last_signal.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.hostname
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I2B().pack(_x.last_signal.secs, _x.last_signal.nsecs, _x.is_alive, _x.current_state.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.last_signal is None:
        self.last_signal = genpy.Time()
      if self.current_state is None:
        self.current_state = droneMsgsROS.msg.ProcessState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hostname = str[start:end].decode('utf-8')
      else:
        self.hostname = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.last_signal.secs, _x.last_signal.nsecs, _x.is_alive, _x.current_state.state,) = _get_struct_2I2B().unpack(str[start:end])
      self.is_alive = bool(self.is_alive)
      self.last_signal.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2B = None
def _get_struct_2I2B():
    global _struct_2I2B
    if _struct_2I2B is None:
        _struct_2I2B = struct.Struct("<2I2B")
    return _struct_2I2B
