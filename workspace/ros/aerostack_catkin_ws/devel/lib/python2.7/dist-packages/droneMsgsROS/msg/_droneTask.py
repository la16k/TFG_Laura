# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from droneMsgsROS/droneTask.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import droneMsgsROS.msg

class droneTask(genpy.Message):
  _md5sum = "19c50e338827bfba091aba1b9adf1597"
  _type = "droneMsgsROS/droneTask"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Task struct 

int32 time


int32 mpCommand 

int32 TAKE_OFF                   = 1
int32 HOVER                      = 2
int32 LAND                       = 3
int32 START_CONTROLLER           = 4
int32 SLEEP                      = 5
int32 ABORT_LANDING_AND_TAKE_OFF = 6
int32 MOVE_MANUAL_ALTITUD        = 7
int32 MOVE_MANUAL_THRUST         = 8
int32 MOVE_POSITION              = 9
int32 MOVE_SPEED                 = 10
int32 MOVE_TRAJECTORY            = 11
int32 MOVE_VISUAL_SERVOING       = 12
int32 HOVERING_VISUAL_SERVOING   = 13
int32 EMERGENCY                  = 14
int32 MOVE_FLIP                  = 15
int32 MOVE_FLIP_RIGHT            = 16
int32 MOVE_FLIP_LEFT             = 17
int32 MOVE_FLIP_FRONT            = 18
int32 MOVE_FLIP_BACK             = 19
int32 MOVE_EMERGENCY             = 20
int32 LAND_AUTONOMOUS            = 21
int32 MOVE_VISUAL_SERVOING_RL    = 22
int32 UNKNOWN                    = 100

float32 yaw

string speech_name

#This Modules are going to be sent by the Mission Planner or HMI
#to the ManagerOfActions for activating some optional modules
string[] module_names

#Used for Moving Tasks
vector3f point

vector3f pointToLook

int32 yawSelector
#yawSelector == 0 means no Yaw nor PointToLook
#yawSelector == 1 means MOVE in YAW
#yawSelector == 2 means MOVE with PointToLook


================================================================================
MSG: droneMsgsROS/vector3f
#This message has the information of a 3D point (float)


float32 x
float32 y
float32 z

"""
  # Pseudo-constants
  TAKE_OFF = 1
  HOVER = 2
  LAND = 3
  START_CONTROLLER = 4
  SLEEP = 5
  ABORT_LANDING_AND_TAKE_OFF = 6
  MOVE_MANUAL_ALTITUD = 7
  MOVE_MANUAL_THRUST = 8
  MOVE_POSITION = 9
  MOVE_SPEED = 10
  MOVE_TRAJECTORY = 11
  MOVE_VISUAL_SERVOING = 12
  HOVERING_VISUAL_SERVOING = 13
  EMERGENCY = 14
  MOVE_FLIP = 15
  MOVE_FLIP_RIGHT = 16
  MOVE_FLIP_LEFT = 17
  MOVE_FLIP_FRONT = 18
  MOVE_FLIP_BACK = 19
  MOVE_EMERGENCY = 20
  LAND_AUTONOMOUS = 21
  MOVE_VISUAL_SERVOING_RL = 22
  UNKNOWN = 100

  __slots__ = ['time','mpCommand','yaw','speech_name','module_names','point','pointToLook','yawSelector']
  _slot_types = ['int32','int32','float32','string','string[]','droneMsgsROS/vector3f','droneMsgsROS/vector3f','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,mpCommand,yaw,speech_name,module_names,point,pointToLook,yawSelector

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(droneTask, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0
      if self.mpCommand is None:
        self.mpCommand = 0
      if self.yaw is None:
        self.yaw = 0.
      if self.speech_name is None:
        self.speech_name = ''
      if self.module_names is None:
        self.module_names = []
      if self.point is None:
        self.point = droneMsgsROS.msg.vector3f()
      if self.pointToLook is None:
        self.pointToLook = droneMsgsROS.msg.vector3f()
      if self.yawSelector is None:
        self.yawSelector = 0
    else:
      self.time = 0
      self.mpCommand = 0
      self.yaw = 0.
      self.speech_name = ''
      self.module_names = []
      self.point = droneMsgsROS.msg.vector3f()
      self.pointToLook = droneMsgsROS.msg.vector3f()
      self.yawSelector = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2if().pack(_x.time, _x.mpCommand, _x.yaw))
      _x = self.speech_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.module_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.module_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self
      buff.write(_get_struct_6fi().pack(_x.point.x, _x.point.y, _x.point.z, _x.pointToLook.x, _x.pointToLook.y, _x.pointToLook.z, _x.yawSelector))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point is None:
        self.point = droneMsgsROS.msg.vector3f()
      if self.pointToLook is None:
        self.pointToLook = droneMsgsROS.msg.vector3f()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.time, _x.mpCommand, _x.yaw,) = _get_struct_2if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.speech_name = str[start:end].decode('utf-8')
      else:
        self.speech_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.module_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.module_names.append(val1)
      _x = self
      start = end
      end += 28
      (_x.point.x, _x.point.y, _x.point.z, _x.pointToLook.x, _x.pointToLook.y, _x.pointToLook.z, _x.yawSelector,) = _get_struct_6fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2if().pack(_x.time, _x.mpCommand, _x.yaw))
      _x = self.speech_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.module_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.module_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self
      buff.write(_get_struct_6fi().pack(_x.point.x, _x.point.y, _x.point.z, _x.pointToLook.x, _x.pointToLook.y, _x.pointToLook.z, _x.yawSelector))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point is None:
        self.point = droneMsgsROS.msg.vector3f()
      if self.pointToLook is None:
        self.pointToLook = droneMsgsROS.msg.vector3f()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.time, _x.mpCommand, _x.yaw,) = _get_struct_2if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.speech_name = str[start:end].decode('utf-8')
      else:
        self.speech_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.module_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.module_names.append(val1)
      _x = self
      start = end
      end += 28
      (_x.point.x, _x.point.y, _x.point.z, _x.pointToLook.x, _x.pointToLook.y, _x.pointToLook.z, _x.yawSelector,) = _get_struct_6fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2if = None
def _get_struct_2if():
    global _struct_2if
    if _struct_2if is None:
        _struct_2if = struct.Struct("<2if")
    return _struct_2if
_struct_6fi = None
def _get_struct_6fi():
    global _struct_6fi
    if _struct_6fi is None:
        _struct_6fi = struct.Struct("<6fi")
    return _struct_6fi
