# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from droneMsgsROS/droneManagerStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class droneManagerStatus(genpy.Message):
  _md5sum = "1acf637429d50a55968b4a1c25279cbd"
  _type = "droneMsgsROS/droneManagerStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#Header
Header header


#Status of the Manager of Actions
int32 status



#Predefined status
int32 TAKINGOFF			                = 1
int32 HOVERING			                = 2
int32 LANDING 			                = 3
int32 LANDED           		          = 4
int32 SLEEPING                      = 5
#int32 ABORT_LANDING_AND_TAKE_OFF   = 6
int32 MOVING_MANUAL_ALTITUD         = 7
int32 MOVING_MANUAL_THRUST          = 8
int32 MOVING_POSITION               = 9
int32 MOVING_SPEED                  = 10
int32 MOVING_TRAJECTORY             = 11
int32 MOVING_VISUAL_SERVOING        = 12
int32 HOVERING_VISUAL_SERVOING      = 13
int32 EMERGENCY                     = 14
int32 MOVING_FLIP                   = 15
int32 MOVING_FLIP_RIGHT             = 16
int32 MOVING_FLIP_LEFT              = 17
int32 MOVING_FLIP_FRONT             = 18
int32 MOVING_FLIP_BACK              = 19
int32 MOVING_EMERGENCY              = 20
int32 LANDING_AUTONOMOUS            = 21
int32 MOVE_VISUAL_SERVOING_RL       = 22
int32 UNKNOWN                       = 100

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  TAKINGOFF = 1
  HOVERING = 2
  LANDING = 3
  LANDED = 4
  SLEEPING = 5
  MOVING_MANUAL_ALTITUD = 7
  MOVING_MANUAL_THRUST = 8
  MOVING_POSITION = 9
  MOVING_SPEED = 10
  MOVING_TRAJECTORY = 11
  MOVING_VISUAL_SERVOING = 12
  HOVERING_VISUAL_SERVOING = 13
  EMERGENCY = 14
  MOVING_FLIP = 15
  MOVING_FLIP_RIGHT = 16
  MOVING_FLIP_LEFT = 17
  MOVING_FLIP_FRONT = 18
  MOVING_FLIP_BACK = 19
  MOVING_EMERGENCY = 20
  LANDING_AUTONOMOUS = 21
  MOVE_VISUAL_SERVOING_RL = 22
  UNKNOWN = 100

  __slots__ = ['header','status']
  _slot_types = ['std_msgs/Header','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(droneManagerStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = 0
    else:
      self.header = std_msgs.msg.Header()
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
