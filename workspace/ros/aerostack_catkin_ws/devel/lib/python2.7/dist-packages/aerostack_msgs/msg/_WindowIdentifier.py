# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aerostack_msgs/WindowIdentifier.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WindowIdentifier(genpy.Message):
  _md5sum = "5e9383486285e796b0b69ac221522f16"
  _type = "aerostack_msgs/WindowIdentifier"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Window identifier enum

int16 id  # Id of the window

int16 CLOSE_MAIN_WINDOW = -1
int16 MINIMIZE_MAIN_WINDOW = 0
int16 EDIT_ENVIRONMENT = 1
int16 BEHAVIOR_TREE_DESIGN = 2
int16 ENVIRONMENT_VIEWER = 3
int16 KEYBOARD_CONTROL = 5
int16 FIRST_PERSON_VIEW = 6
int16 PYTHON_CONTROL= 7
int16 TML_CONTROL = 8
int16 VEHICLE_DYNAMICS = 9
int16 EXECUTION_VIEWER = 10
int16 ALPHANUMERIC_INTERFACE_CONTROL = 11
int16 PARAMETERS_VIEWER = 12
int16 CAMERA_VIEWER = 13
int16 BEHAVIOR_TREE_CONTROL = 14
int16 IMPORT_MISSION_PLAN_PYTHON = 15
int16 IMPORT_MISSION_PLAN_TML = 16
int16 SELECT_CONFIGURATION_FOLDER = 17
int16 PYTHON_MISSION_INTERPRETER = 18
int16 TASK_BASED_MISSION_INTERPRETER = 19



"""
  # Pseudo-constants
  CLOSE_MAIN_WINDOW = -1
  MINIMIZE_MAIN_WINDOW = 0
  EDIT_ENVIRONMENT = 1
  BEHAVIOR_TREE_DESIGN = 2
  ENVIRONMENT_VIEWER = 3
  KEYBOARD_CONTROL = 5
  FIRST_PERSON_VIEW = 6
  PYTHON_CONTROL = 7
  TML_CONTROL = 8
  VEHICLE_DYNAMICS = 9
  EXECUTION_VIEWER = 10
  ALPHANUMERIC_INTERFACE_CONTROL = 11
  PARAMETERS_VIEWER = 12
  CAMERA_VIEWER = 13
  BEHAVIOR_TREE_CONTROL = 14
  IMPORT_MISSION_PLAN_PYTHON = 15
  IMPORT_MISSION_PLAN_TML = 16
  SELECT_CONFIGURATION_FOLDER = 17
  PYTHON_MISSION_INTERPRETER = 18
  TASK_BASED_MISSION_INTERPRETER = 19

  __slots__ = ['id']
  _slot_types = ['int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WindowIdentifier, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
    else:
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 2
      (self.id,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 2
      (self.id,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
