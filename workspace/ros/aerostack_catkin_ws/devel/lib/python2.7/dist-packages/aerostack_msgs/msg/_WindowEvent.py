# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aerostack_msgs/WindowEvent.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WindowEvent(genpy.Message):
  _md5sum = "905aabb9354f08eff804df175cec5d3c"
  _type = "aerostack_msgs/WindowEvent"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Event in a GUI Window

uint8  window                        # Id of the window
int8   event                         # Id of the event

uint8 INTEGRATED_VIEWER              = 0
uint8 ENVIRONMENT_VIEWER             = 1
uint8 TELEOPERATION_CONTROL          = 2
uint8 FIRST_PERSON_VIEWER            = 3
uint8 PYTHON_CONTROL                 = 4
uint8 VEHICLE_DYNAMICS_VIEWER        = 5
uint8 EXECUTION_VIEWER               = 6
uint8 ALPHANUMERIC_INTERFACE_CONTROL = 7
uint8 BEHAVIOR_TREE_INTERPRETER      = 8
uint8 PYTHON_MISSION_INTERPRETER     = 9


int8 CLOSE                           = -1
int8 MINIMIZE                        = 0
int8 OPEN                            = 1

"""
  # Pseudo-constants
  INTEGRATED_VIEWER = 0
  ENVIRONMENT_VIEWER = 1
  TELEOPERATION_CONTROL = 2
  FIRST_PERSON_VIEWER = 3
  PYTHON_CONTROL = 4
  VEHICLE_DYNAMICS_VIEWER = 5
  EXECUTION_VIEWER = 6
  ALPHANUMERIC_INTERFACE_CONTROL = 7
  BEHAVIOR_TREE_INTERPRETER = 8
  PYTHON_MISSION_INTERPRETER = 9
  CLOSE = -1
  MINIMIZE = 0
  OPEN = 1

  __slots__ = ['window','event']
  _slot_types = ['uint8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       window,event

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WindowEvent, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.window is None:
        self.window = 0
      if self.event is None:
        self.event = 0
    else:
      self.window = 0
      self.event = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bb().pack(_x.window, _x.event))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.window, _x.event,) = _get_struct_Bb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bb().pack(_x.window, _x.event))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.window, _x.event,) = _get_struct_Bb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bb = None
def _get_struct_Bb():
    global _struct_Bb
    if _struct_Bb is None:
        _struct_Bb = struct.Struct("<Bb")
    return _struct_Bb
