// Generated by gencpp from file mikrokopter_driver/OktoCommand.msg
// DO NOT EDIT!


#ifndef MIKROKOPTER_DRIVER_MESSAGE_OKTOCOMMAND_H
#define MIKROKOPTER_DRIVER_MESSAGE_OKTOCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mikrokopter_driver
{
template <class ContainerAllocator>
struct OktoCommand_
{
  typedef OktoCommand_<ContainerAllocator> Type;

  OktoCommand_()
    : header()
    , nick(0)
    , roll(0)
    , dyaw(0)
    , gas(0)
    , height(0)  {
    }
  OktoCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nick(0)
    , roll(0)
    , dyaw(0)
    , gas(0)
    , height(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _nick_type;
  _nick_type nick;

   typedef int16_t _roll_type;
  _roll_type roll;

   typedef int16_t _dyaw_type;
  _dyaw_type dyaw;

   typedef int16_t _gas_type;
  _gas_type gas;

   typedef int16_t _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> const> ConstPtr;

}; // struct OktoCommand_

typedef ::mikrokopter_driver::OktoCommand_<std::allocator<void> > OktoCommand;

typedef boost::shared_ptr< ::mikrokopter_driver::OktoCommand > OktoCommandPtr;
typedef boost::shared_ptr< ::mikrokopter_driver::OktoCommand const> OktoCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mikrokopter_driver::OktoCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mikrokopter_driver::OktoCommand_<ContainerAllocator1> & lhs, const ::mikrokopter_driver::OktoCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.nick == rhs.nick &&
    lhs.roll == rhs.roll &&
    lhs.dyaw == rhs.dyaw &&
    lhs.gas == rhs.gas &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mikrokopter_driver::OktoCommand_<ContainerAllocator1> & lhs, const ::mikrokopter_driver::OktoCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mikrokopter_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8042a5192716e1b97802f18681dff93";
  }

  static const char* value(const ::mikrokopter_driver::OktoCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8042a5192716e1bULL;
  static const uint64_t static_value2 = 0x97802f18681dff93ULL;
};

template<class ContainerAllocator>
struct DataType< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mikrokopter_driver/OktoCommand";
  }

  static const char* value(const ::mikrokopter_driver::OktoCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int16 nick      # -127...+127	\n"
"int16 roll	# -127...+127\n"
"int16 dyaw	# -127...+127\n"
"int16 gas	#    0...+255\n"
"int16 height	# unused or usage unknown\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mikrokopter_driver::OktoCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nick);
      stream.next(m.roll);
      stream.next(m.dyaw);
      stream.next(m.gas);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OktoCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mikrokopter_driver::OktoCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mikrokopter_driver::OktoCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nick: ";
    Printer<int16_t>::stream(s, indent + "  ", v.nick);
    s << indent << "roll: ";
    Printer<int16_t>::stream(s, indent + "  ", v.roll);
    s << indent << "dyaw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dyaw);
    s << indent << "gas: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gas);
    s << indent << "height: ";
    Printer<int16_t>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIKROKOPTER_DRIVER_MESSAGE_OKTOCOMMAND_H
