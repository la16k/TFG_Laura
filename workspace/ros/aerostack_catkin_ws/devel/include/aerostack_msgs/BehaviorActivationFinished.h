// Generated by gencpp from file aerostack_msgs/BehaviorActivationFinished.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_BEHAVIORACTIVATIONFINISHED_H
#define AEROSTACK_MSGS_MESSAGE_BEHAVIORACTIVATIONFINISHED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace aerostack_msgs
{
template <class ContainerAllocator>
struct BehaviorActivationFinished_
{
  typedef BehaviorActivationFinished_<ContainerAllocator> Type;

  BehaviorActivationFinished_()
    : header()
    , name()
    , termination_cause(0)
    , error_message()  {
    }
  BehaviorActivationFinished_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , termination_cause(0)
    , error_message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int8_t _termination_cause_type;
  _termination_cause_type termination_cause;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_message_type;
  _error_message_type error_message;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GOAL_ACHIEVED)
  #undef GOAL_ACHIEVED
#endif
#if defined(_WIN32) && defined(TIME_OUT)
  #undef TIME_OUT
#endif
#if defined(_WIN32) && defined(WRONG_PROGRESS)
  #undef WRONG_PROGRESS
#endif
#if defined(_WIN32) && defined(PROCESS_FAILURE)
  #undef PROCESS_FAILURE
#endif
#if defined(_WIN32) && defined(INTERRUPTED)
  #undef INTERRUPTED
#endif

  enum {
    GOAL_ACHIEVED = 1,
    TIME_OUT = 2,
    WRONG_PROGRESS = 3,
    PROCESS_FAILURE = 4,
    INTERRUPTED = 5,
  };


  typedef boost::shared_ptr< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorActivationFinished_

typedef ::aerostack_msgs::BehaviorActivationFinished_<std::allocator<void> > BehaviorActivationFinished;

typedef boost::shared_ptr< ::aerostack_msgs::BehaviorActivationFinished > BehaviorActivationFinishedPtr;
typedef boost::shared_ptr< ::aerostack_msgs::BehaviorActivationFinished const> BehaviorActivationFinishedConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator1> & lhs, const ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.termination_cause == rhs.termination_cause &&
    lhs.error_message == rhs.error_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator1> & lhs, const ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8fe87f5c063987e9fa2d0de2832479d";
  }

  static const char* value(const ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8fe87f5c063987eULL;
  static const uint64_t static_value2 = 0x9fa2d0de2832479dULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/BehaviorActivationFinished";
  }

  static const char* value(const ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Execution result of a behavior\n"
"\n"
"Header header                    # Message header\n"
"string name                      # Behavior name\n"
"int8 termination_cause         # Code of the behavior activation result\n"
"string error_message             # Explicative message in case of error\n"
"\n"
"# Possible values for termination_cause\n"
"\n"
"int8 GOAL_ACHIEVED        = 1\n"
"int8 TIME_OUT             = 2\n"
"int8 WRONG_PROGRESS       = 3\n"
"int8 PROCESS_FAILURE      = 4\n"
"int8 INTERRUPTED          = 5\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.termination_cause);
      stream.next(m.error_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorActivationFinished_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::BehaviorActivationFinished_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "termination_cause: ";
    Printer<int8_t>::stream(s, indent + "  ", v.termination_cause);
    s << indent << "error_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_BEHAVIORACTIVATIONFINISHED_H
