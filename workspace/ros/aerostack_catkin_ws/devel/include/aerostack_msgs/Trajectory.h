// Generated by gencpp from file aerostack_msgs/Trajectory.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_TRAJECTORY_H
#define AEROSTACK_MSGS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Polygon.h>

namespace aerostack_msgs
{
template <class ContainerAllocator>
struct Trajectory_
{
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
    : header()
    , Trajectory()
    , is_periodic(false)
    , initial_checkpoint(0)  {
    }
  Trajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Trajectory(_alloc)
    , is_periodic(false)
    , initial_checkpoint(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _Trajectory_type;
  _Trajectory_type Trajectory;

   typedef uint8_t _is_periodic_type;
  _is_periodic_type is_periodic;

   typedef int32_t _initial_checkpoint_type;
  _initial_checkpoint_type initial_checkpoint;





  typedef boost::shared_ptr< ::aerostack_msgs::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory_

typedef ::aerostack_msgs::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::aerostack_msgs::Trajectory > TrajectoryPtr;
typedef boost::shared_ptr< ::aerostack_msgs::Trajectory const> TrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::Trajectory_<ContainerAllocator1> & lhs, const ::aerostack_msgs::Trajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Trajectory == rhs.Trajectory &&
    lhs.is_periodic == rhs.is_periodic &&
    lhs.initial_checkpoint == rhs.initial_checkpoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::Trajectory_<ContainerAllocator1> & lhs, const ::aerostack_msgs::Trajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0fbc4059de3529d32f8613a41577e9d";
  }

  static const char* value(const ::aerostack_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0fbc4059de3529dULL;
  static const uint64_t static_value2 = 0x32f8613a41577e9dULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/Trajectory";
  }

  static const char* value(const ::aerostack_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Vector of points of the trajectory with header \n"
"\n"
"Header header                      #Timestamp and sequence number    \n"
"\n"
"geometry_msgs/Polygon Trajectory   #Set of points in the trajectory\n"
"bool is_periodic                   #Periodicity of the trajectory\n"
"int32 initial_checkpoint           #Initial checkpoint of the trajectory \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::aerostack_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Trajectory);
      stream.next(m.is_periodic);
      stream.next(m.initial_checkpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Trajectory: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.Trajectory);
    s << indent << "is_periodic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_periodic);
    s << indent << "initial_checkpoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.initial_checkpoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_TRAJECTORY_H
