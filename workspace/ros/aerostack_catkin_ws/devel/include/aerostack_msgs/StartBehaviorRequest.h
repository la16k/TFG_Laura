// Generated by gencpp from file aerostack_msgs/StartBehaviorRequest.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_STARTBEHAVIORREQUEST_H
#define AEROSTACK_MSGS_MESSAGE_STARTBEHAVIORREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aerostack_msgs
{
template <class ContainerAllocator>
struct StartBehaviorRequest_
{
  typedef StartBehaviorRequest_<ContainerAllocator> Type;

  StartBehaviorRequest_()
    : arguments()
    , uid(0.0)
    , timeout(0)
    , first_processes()
    , next_processes()  {
    }
  StartBehaviorRequest_(const ContainerAllocator& _alloc)
    : arguments(_alloc)
    , uid(0.0)
    , timeout(0)
    , first_processes(_alloc)
    , next_processes(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arguments_type;
  _arguments_type arguments;

   typedef double _uid_type;
  _uid_type uid;

   typedef int32_t _timeout_type;
  _timeout_type timeout;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _first_processes_type;
  _first_processes_type first_processes;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _next_processes_type;
  _next_processes_type next_processes;





  typedef boost::shared_ptr< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartBehaviorRequest_

typedef ::aerostack_msgs::StartBehaviorRequest_<std::allocator<void> > StartBehaviorRequest;

typedef boost::shared_ptr< ::aerostack_msgs::StartBehaviorRequest > StartBehaviorRequestPtr;
typedef boost::shared_ptr< ::aerostack_msgs::StartBehaviorRequest const> StartBehaviorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator1> & lhs, const ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.arguments == rhs.arguments &&
    lhs.uid == rhs.uid &&
    lhs.timeout == rhs.timeout &&
    lhs.first_processes == rhs.first_processes &&
    lhs.next_processes == rhs.next_processes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator1> & lhs, const ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10939515b209cab69d93dcd309cc327c";
  }

  static const char* value(const ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10939515b209cab6ULL;
  static const uint64_t static_value2 = 0x9d93dcd309cc327cULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/StartBehaviorRequest";
  }

  static const char* value(const ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This service sends the argument required to the behaviors\n"
"\n"
"string arguments          # The arguments of the behavior\n"
"float64 uid               # The UID of the behavior\n"
"int32 timeout             # The time the behavior needs to be active\n"
"string[] first_processes  # Processes that needs to be active by the behavior\n"
"string[] next_processes   # Processes that needs to be active by the behavior\n"
;
  }

  static const char* value(const ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arguments);
      stream.next(m.uid);
      stream.next(m.timeout);
      stream.next(m.first_processes);
      stream.next(m.next_processes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartBehaviorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::StartBehaviorRequest_<ContainerAllocator>& v)
  {
    s << indent << "arguments: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arguments);
    s << indent << "uid: ";
    Printer<double>::stream(s, indent + "  ", v.uid);
    s << indent << "timeout: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeout);
    s << indent << "first_processes[]" << std::endl;
    for (size_t i = 0; i < v.first_processes.size(); ++i)
    {
      s << indent << "  first_processes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.first_processes[i]);
    }
    s << indent << "next_processes[]" << std::endl;
    for (size_t i = 0; i < v.next_processes.size(); ++i)
    {
      s << indent << "  next_processes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.next_processes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_STARTBEHAVIORREQUEST_H
