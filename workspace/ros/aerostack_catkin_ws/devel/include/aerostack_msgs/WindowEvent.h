// Generated by gencpp from file aerostack_msgs/WindowEvent.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_WINDOWEVENT_H
#define AEROSTACK_MSGS_MESSAGE_WINDOWEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aerostack_msgs
{
template <class ContainerAllocator>
struct WindowEvent_
{
  typedef WindowEvent_<ContainerAllocator> Type;

  WindowEvent_()
    : window(0)
    , event(0)  {
    }
  WindowEvent_(const ContainerAllocator& _alloc)
    : window(0)
    , event(0)  {
  (void)_alloc;
    }



   typedef uint8_t _window_type;
  _window_type window;

   typedef int8_t _event_type;
  _event_type event;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INTEGRATED_VIEWER)
  #undef INTEGRATED_VIEWER
#endif
#if defined(_WIN32) && defined(ENVIRONMENT_VIEWER)
  #undef ENVIRONMENT_VIEWER
#endif
#if defined(_WIN32) && defined(TELEOPERATION_CONTROL)
  #undef TELEOPERATION_CONTROL
#endif
#if defined(_WIN32) && defined(FIRST_PERSON_VIEWER)
  #undef FIRST_PERSON_VIEWER
#endif
#if defined(_WIN32) && defined(PYTHON_CONTROL)
  #undef PYTHON_CONTROL
#endif
#if defined(_WIN32) && defined(VEHICLE_DYNAMICS_VIEWER)
  #undef VEHICLE_DYNAMICS_VIEWER
#endif
#if defined(_WIN32) && defined(EXECUTION_VIEWER)
  #undef EXECUTION_VIEWER
#endif
#if defined(_WIN32) && defined(ALPHANUMERIC_INTERFACE_CONTROL)
  #undef ALPHANUMERIC_INTERFACE_CONTROL
#endif
#if defined(_WIN32) && defined(BEHAVIOR_TREE_INTERPRETER)
  #undef BEHAVIOR_TREE_INTERPRETER
#endif
#if defined(_WIN32) && defined(PYTHON_MISSION_INTERPRETER)
  #undef PYTHON_MISSION_INTERPRETER
#endif
#if defined(_WIN32) && defined(CLOSE)
  #undef CLOSE
#endif
#if defined(_WIN32) && defined(MINIMIZE)
  #undef MINIMIZE
#endif
#if defined(_WIN32) && defined(OPEN)
  #undef OPEN
#endif

  enum {
    INTEGRATED_VIEWER = 0u,
    ENVIRONMENT_VIEWER = 1u,
    TELEOPERATION_CONTROL = 2u,
    FIRST_PERSON_VIEWER = 3u,
    PYTHON_CONTROL = 4u,
    VEHICLE_DYNAMICS_VIEWER = 5u,
    EXECUTION_VIEWER = 6u,
    ALPHANUMERIC_INTERFACE_CONTROL = 7u,
    BEHAVIOR_TREE_INTERPRETER = 8u,
    PYTHON_MISSION_INTERPRETER = 9u,
    CLOSE = -1,
    MINIMIZE = 0,
    OPEN = 1,
  };


  typedef boost::shared_ptr< ::aerostack_msgs::WindowEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::WindowEvent_<ContainerAllocator> const> ConstPtr;

}; // struct WindowEvent_

typedef ::aerostack_msgs::WindowEvent_<std::allocator<void> > WindowEvent;

typedef boost::shared_ptr< ::aerostack_msgs::WindowEvent > WindowEventPtr;
typedef boost::shared_ptr< ::aerostack_msgs::WindowEvent const> WindowEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::WindowEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::WindowEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::WindowEvent_<ContainerAllocator1> & lhs, const ::aerostack_msgs::WindowEvent_<ContainerAllocator2> & rhs)
{
  return lhs.window == rhs.window &&
    lhs.event == rhs.event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::WindowEvent_<ContainerAllocator1> & lhs, const ::aerostack_msgs::WindowEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::WindowEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::WindowEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::WindowEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::WindowEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::WindowEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::WindowEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::WindowEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "905aabb9354f08eff804df175cec5d3c";
  }

  static const char* value(const ::aerostack_msgs::WindowEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x905aabb9354f08efULL;
  static const uint64_t static_value2 = 0xf804df175cec5d3cULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::WindowEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/WindowEvent";
  }

  static const char* value(const ::aerostack_msgs::WindowEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::WindowEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Event in a GUI Window\n"
"\n"
"uint8  window                        # Id of the window\n"
"int8   event                         # Id of the event\n"
"\n"
"uint8 INTEGRATED_VIEWER              = 0\n"
"uint8 ENVIRONMENT_VIEWER             = 1\n"
"uint8 TELEOPERATION_CONTROL          = 2\n"
"uint8 FIRST_PERSON_VIEWER            = 3\n"
"uint8 PYTHON_CONTROL                 = 4\n"
"uint8 VEHICLE_DYNAMICS_VIEWER        = 5\n"
"uint8 EXECUTION_VIEWER               = 6\n"
"uint8 ALPHANUMERIC_INTERFACE_CONTROL = 7\n"
"uint8 BEHAVIOR_TREE_INTERPRETER      = 8\n"
"uint8 PYTHON_MISSION_INTERPRETER     = 9\n"
"\n"
"\n"
"int8 CLOSE                           = -1\n"
"int8 MINIMIZE                        = 0\n"
"int8 OPEN                            = 1\n"
"\n"
;
  }

  static const char* value(const ::aerostack_msgs::WindowEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::WindowEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.window);
      stream.next(m.event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WindowEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::WindowEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::WindowEvent_<ContainerAllocator>& v)
  {
    s << indent << "window: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.window);
    s << indent << "event: ";
    Printer<int8_t>::stream(s, indent + "  ", v.event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_WINDOWEVENT_H
