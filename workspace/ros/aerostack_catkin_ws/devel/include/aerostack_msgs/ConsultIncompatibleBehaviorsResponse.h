// Generated by gencpp from file aerostack_msgs/ConsultIncompatibleBehaviorsResponse.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_CONSULTINCOMPATIBLEBEHAVIORSRESPONSE_H
#define AEROSTACK_MSGS_MESSAGE_CONSULTINCOMPATIBLEBEHAVIORSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <aerostack_msgs/BehaviorCommand.h>

namespace aerostack_msgs
{
template <class ContainerAllocator>
struct ConsultIncompatibleBehaviorsResponse_
{
  typedef ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> Type;

  ConsultIncompatibleBehaviorsResponse_()
    : incompatible_behaviors()
    , uids()
    , ack(false)
    , error_message()  {
    }
  ConsultIncompatibleBehaviorsResponse_(const ContainerAllocator& _alloc)
    : incompatible_behaviors(_alloc)
    , uids(_alloc)
    , ack(false)
    , error_message(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >::other >  _incompatible_behaviors_type;
  _incompatible_behaviors_type incompatible_behaviors;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _uids_type;
  _uids_type uids;

   typedef uint8_t _ack_type;
  _ack_type ack;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_message_type;
  _error_message_type error_message;





  typedef boost::shared_ptr< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ConsultIncompatibleBehaviorsResponse_

typedef ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<std::allocator<void> > ConsultIncompatibleBehaviorsResponse;

typedef boost::shared_ptr< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse > ConsultIncompatibleBehaviorsResponsePtr;
typedef boost::shared_ptr< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse const> ConsultIncompatibleBehaviorsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.incompatible_behaviors == rhs.incompatible_behaviors &&
    lhs.uids == rhs.uids &&
    lhs.ack == rhs.ack &&
    lhs.error_message == rhs.error_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8626cf15d28972b2dacbb48efd48d2ca";
  }

  static const char* value(const ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8626cf15d28972b2ULL;
  static const uint64_t static_value2 = 0xdacbb48efd48d2caULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/ConsultIncompatibleBehaviorsResponse";
  }

  static const char* value(const ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BehaviorCommand[] incompatible_behaviors     # List of incompatible behaviors\n"
"float64[] uids\n"
"\n"
"bool ack                                     # Acknowledgement\n"
"string error_message                         # Error message\n"
"\n"
"\n"
"================================================================================\n"
"MSG: aerostack_msgs/BehaviorCommand\n"
"# Request to execute a behavior with a set of arguments\n"
"\n"
"string name       # Behavior name\n"
"string arguments  # Arguments of the behavior\n"
"\n"
;
  }

  static const char* value(const ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.incompatible_behaviors);
      stream.next(m.uids);
      stream.next(m.ack);
      stream.next(m.error_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConsultIncompatibleBehaviorsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator>& v)
  {
    s << indent << "incompatible_behaviors[]" << std::endl;
    for (size_t i = 0; i < v.incompatible_behaviors.size(); ++i)
    {
      s << indent << "  incompatible_behaviors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.incompatible_behaviors[i]);
    }
    s << indent << "uids[]" << std::endl;
    for (size_t i = 0; i < v.uids.size(); ++i)
    {
      s << indent << "  uids[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.uids[i]);
    }
    s << indent << "ack: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ack);
    s << indent << "error_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_CONSULTINCOMPATIBLEBEHAVIORSRESPONSE_H
