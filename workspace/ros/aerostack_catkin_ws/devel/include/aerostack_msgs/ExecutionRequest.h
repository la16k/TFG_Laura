// Generated by gencpp from file aerostack_msgs/ExecutionRequest.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_EXECUTIONREQUEST_H
#define AEROSTACK_MSGS_MESSAGE_EXECUTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <aerostack_msgs/BehaviorCommandPriority.h>

namespace aerostack_msgs
{
template <class ContainerAllocator>
struct ExecutionRequest_
{
  typedef ExecutionRequest_<ContainerAllocator> Type;

  ExecutionRequest_()
    : behavior_command()
    , request_type(0)
    , success(false)
    , failure_cause()  {
    }
  ExecutionRequest_(const ContainerAllocator& _alloc)
    : behavior_command(_alloc)
    , request_type(0)
    , success(false)
    , failure_cause(_alloc)  {
  (void)_alloc;
    }



   typedef  ::aerostack_msgs::BehaviorCommandPriority_<ContainerAllocator>  _behavior_command_type;
  _behavior_command_type behavior_command;

   typedef int8_t _request_type_type;
  _request_type_type request_type;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _failure_cause_type;
  _failure_cause_type failure_cause;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DEACTIVATE)
  #undef DEACTIVATE
#endif
#if defined(_WIN32) && defined(ACTIVATE)
  #undef ACTIVATE
#endif
#if defined(_WIN32) && defined(ACTIVATION_FINISHED)
  #undef ACTIVATION_FINISHED
#endif

  enum {
    DEACTIVATE = 0,
    ACTIVATE = 1,
    ACTIVATION_FINISHED = 2,
  };


  typedef boost::shared_ptr< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ExecutionRequest_

typedef ::aerostack_msgs::ExecutionRequest_<std::allocator<void> > ExecutionRequest;

typedef boost::shared_ptr< ::aerostack_msgs::ExecutionRequest > ExecutionRequestPtr;
typedef boost::shared_ptr< ::aerostack_msgs::ExecutionRequest const> ExecutionRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::ExecutionRequest_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ExecutionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.behavior_command == rhs.behavior_command &&
    lhs.request_type == rhs.request_type &&
    lhs.success == rhs.success &&
    lhs.failure_cause == rhs.failure_cause;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::ExecutionRequest_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ExecutionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e824219c391ecd40511282344d625c52";
  }

  static const char* value(const ::aerostack_msgs::ExecutionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe824219c391ecd40ULL;
  static const uint64_t static_value2 = 0x511282344d625c52ULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/ExecutionRequest";
  }

  static const char* value(const ::aerostack_msgs::ExecutionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request of a behavior activation/deactivation\n"
"\n"
"BehaviorCommandPriority behavior_command   # Requested behavior\n"
"int8 request_type                  # Type of the request\n"
"bool success                       # True if the operation was successful \n"
"string failure_cause               # Code of the behavior event\n"
"\n"
"int8 DEACTIVATE=0\n"
"int8 ACTIVATE=1\n"
"int8 ACTIVATION_FINISHED=2\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: aerostack_msgs/BehaviorCommandPriority\n"
"# Request to execute a behavior with a set of arguments\n"
"\n"
"string name       # Behavior name\n"
"string arguments  # Arguments of the behavior\n"
"uint8 priority	  # Priority of the behavior\n"
;
  }

  static const char* value(const ::aerostack_msgs::ExecutionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.behavior_command);
      stream.next(m.request_type);
      stream.next(m.success);
      stream.next(m.failure_cause);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecutionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::ExecutionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::ExecutionRequest_<ContainerAllocator>& v)
  {
    s << indent << "behavior_command: ";
    s << std::endl;
    Printer< ::aerostack_msgs::BehaviorCommandPriority_<ContainerAllocator> >::stream(s, indent + "  ", v.behavior_command);
    s << indent << "request_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.request_type);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "failure_cause: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.failure_cause);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_EXECUTIONREQUEST_H
