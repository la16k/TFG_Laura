// Generated by gencpp from file aerostack_msgs/RequestBehaviorDeactivationRequest.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_REQUESTBEHAVIORDEACTIVATIONREQUEST_H
#define AEROSTACK_MSGS_MESSAGE_REQUESTBEHAVIORDEACTIVATIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aerostack_msgs
{
template <class ContainerAllocator>
struct RequestBehaviorDeactivationRequest_
{
  typedef RequestBehaviorDeactivationRequest_<ContainerAllocator> Type;

  RequestBehaviorDeactivationRequest_()
    : behavior_uid(0)
    , name()  {
    }
  RequestBehaviorDeactivationRequest_(const ContainerAllocator& _alloc)
    : behavior_uid(0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _behavior_uid_type;
  _behavior_uid_type behavior_uid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RequestBehaviorDeactivationRequest_

typedef ::aerostack_msgs::RequestBehaviorDeactivationRequest_<std::allocator<void> > RequestBehaviorDeactivationRequest;

typedef boost::shared_ptr< ::aerostack_msgs::RequestBehaviorDeactivationRequest > RequestBehaviorDeactivationRequestPtr;
typedef boost::shared_ptr< ::aerostack_msgs::RequestBehaviorDeactivationRequest const> RequestBehaviorDeactivationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator1> & lhs, const ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.behavior_uid == rhs.behavior_uid &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator1> & lhs, const ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32595e193fbe6a7709ebd4f7138e7fd6";
  }

  static const char* value(const ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32595e193fbe6a77ULL;
  static const uint64_t static_value2 = 0x09ebd4f7138e7fd6ULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/RequestBehaviorDeactivationRequest";
  }

  static const char* value(const ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This service deactivates a behavior\n"
"\n"
"int32 behavior_uid         # The UID of the behavior to deactivate\n"
"\n"
"string name                # Name of the behavior to deactivate\n"
;
  }

  static const char* value(const ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.behavior_uid);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RequestBehaviorDeactivationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::RequestBehaviorDeactivationRequest_<ContainerAllocator>& v)
  {
    s << indent << "behavior_uid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behavior_uid);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_REQUESTBEHAVIORDEACTIVATIONREQUEST_H
