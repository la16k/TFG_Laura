// Generated by gencpp from file aerostack_msgs/ConsultAvailableBehaviorsResponse.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_CONSULTAVAILABLEBEHAVIORSRESPONSE_H
#define AEROSTACK_MSGS_MESSAGE_CONSULTAVAILABLEBEHAVIORSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <aerostack_msgs/ListOfBehaviors.h>

namespace aerostack_msgs
{
template <class ContainerAllocator>
struct ConsultAvailableBehaviorsResponse_
{
  typedef ConsultAvailableBehaviorsResponse_<ContainerAllocator> Type;

  ConsultAvailableBehaviorsResponse_()
    : available_behaviors()  {
    }
  ConsultAvailableBehaviorsResponse_(const ContainerAllocator& _alloc)
    : available_behaviors(_alloc)  {
  (void)_alloc;
    }



   typedef  ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator>  _available_behaviors_type;
  _available_behaviors_type available_behaviors;





  typedef boost::shared_ptr< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ConsultAvailableBehaviorsResponse_

typedef ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<std::allocator<void> > ConsultAvailableBehaviorsResponse;

typedef boost::shared_ptr< ::aerostack_msgs::ConsultAvailableBehaviorsResponse > ConsultAvailableBehaviorsResponsePtr;
typedef boost::shared_ptr< ::aerostack_msgs::ConsultAvailableBehaviorsResponse const> ConsultAvailableBehaviorsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.available_behaviors == rhs.available_behaviors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "429b93cc7f54710527b820739f48d394";
  }

  static const char* value(const ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x429b93cc7f547105ULL;
  static const uint64_t static_value2 = 0x27b820739f48d394ULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/ConsultAvailableBehaviorsResponse";
  }

  static const char* value(const ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ListOfBehaviors available_behaviors        # The list of available behaviors\n"
"\n"
"\n"
"================================================================================\n"
"MSG: aerostack_msgs/ListOfBehaviors\n"
"# List of behaviors\n"
"\n"
"string[] behaviors                   # List of behaviors names\n"
"BehaviorCommand[] behavior_commands  # List of behavior commands\n"
"\n"
"================================================================================\n"
"MSG: aerostack_msgs/BehaviorCommand\n"
"# Request to execute a behavior with a set of arguments\n"
"\n"
"string name       # Behavior name\n"
"string arguments  # Arguments of the behavior\n"
"\n"
;
  }

  static const char* value(const ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.available_behaviors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConsultAvailableBehaviorsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::ConsultAvailableBehaviorsResponse_<ContainerAllocator>& v)
  {
    s << indent << "available_behaviors: ";
    s << std::endl;
    Printer< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> >::stream(s, indent + "  ", v.available_behaviors);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_CONSULTAVAILABLEBEHAVIORSRESPONSE_H
