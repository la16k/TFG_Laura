// Generated by gencpp from file aerostack_msgs/ListOfBehaviors.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_LISTOFBEHAVIORS_H
#define AEROSTACK_MSGS_MESSAGE_LISTOFBEHAVIORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <aerostack_msgs/BehaviorCommand.h>

namespace aerostack_msgs
{
template <class ContainerAllocator>
struct ListOfBehaviors_
{
  typedef ListOfBehaviors_<ContainerAllocator> Type;

  ListOfBehaviors_()
    : behaviors()
    , behavior_commands()  {
    }
  ListOfBehaviors_(const ContainerAllocator& _alloc)
    : behaviors(_alloc)
    , behavior_commands(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _behaviors_type;
  _behaviors_type behaviors;

   typedef std::vector< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >::other >  _behavior_commands_type;
  _behavior_commands_type behavior_commands;





  typedef boost::shared_ptr< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> const> ConstPtr;

}; // struct ListOfBehaviors_

typedef ::aerostack_msgs::ListOfBehaviors_<std::allocator<void> > ListOfBehaviors;

typedef boost::shared_ptr< ::aerostack_msgs::ListOfBehaviors > ListOfBehaviorsPtr;
typedef boost::shared_ptr< ::aerostack_msgs::ListOfBehaviors const> ListOfBehaviorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator2> & rhs)
{
  return lhs.behaviors == rhs.behaviors &&
    lhs.behavior_commands == rhs.behavior_commands;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "343f10d4d7259bf998987a2f2254fdb9";
  }

  static const char* value(const ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x343f10d4d7259bf9ULL;
  static const uint64_t static_value2 = 0x98987a2f2254fdb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/ListOfBehaviors";
  }

  static const char* value(const ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# List of behaviors\n"
"\n"
"string[] behaviors                   # List of behaviors names\n"
"BehaviorCommand[] behavior_commands  # List of behavior commands\n"
"\n"
"================================================================================\n"
"MSG: aerostack_msgs/BehaviorCommand\n"
"# Request to execute a behavior with a set of arguments\n"
"\n"
"string name       # Behavior name\n"
"string arguments  # Arguments of the behavior\n"
"\n"
;
  }

  static const char* value(const ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.behaviors);
      stream.next(m.behavior_commands);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ListOfBehaviors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::ListOfBehaviors_<ContainerAllocator>& v)
  {
    s << indent << "behaviors[]" << std::endl;
    for (size_t i = 0; i < v.behaviors.size(); ++i)
    {
      s << indent << "  behaviors[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.behaviors[i]);
    }
    s << indent << "behavior_commands[]" << std::endl;
    for (size_t i = 0; i < v.behavior_commands.size(); ++i)
    {
      s << indent << "  behavior_commands[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.behavior_commands[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_LISTOFBEHAVIORS_H
