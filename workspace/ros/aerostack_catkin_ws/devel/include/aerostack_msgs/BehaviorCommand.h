// Generated by gencpp from file aerostack_msgs/BehaviorCommand.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_BEHAVIORCOMMAND_H
#define AEROSTACK_MSGS_MESSAGE_BEHAVIORCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aerostack_msgs
{
template <class ContainerAllocator>
struct BehaviorCommand_
{
  typedef BehaviorCommand_<ContainerAllocator> Type;

  BehaviorCommand_()
    : name()
    , arguments()  {
    }
  BehaviorCommand_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , arguments(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arguments_type;
  _arguments_type arguments;





  typedef boost::shared_ptr< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorCommand_

typedef ::aerostack_msgs::BehaviorCommand_<std::allocator<void> > BehaviorCommand;

typedef boost::shared_ptr< ::aerostack_msgs::BehaviorCommand > BehaviorCommandPtr;
typedef boost::shared_ptr< ::aerostack_msgs::BehaviorCommand const> BehaviorCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::BehaviorCommand_<ContainerAllocator1> & lhs, const ::aerostack_msgs::BehaviorCommand_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.arguments == rhs.arguments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::BehaviorCommand_<ContainerAllocator1> & lhs, const ::aerostack_msgs::BehaviorCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45b2d4d766c3c5ada4451facd92920e2";
  }

  static const char* value(const ::aerostack_msgs::BehaviorCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45b2d4d766c3c5adULL;
  static const uint64_t static_value2 = 0xa4451facd92920e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/BehaviorCommand";
  }

  static const char* value(const ::aerostack_msgs::BehaviorCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request to execute a behavior with a set of arguments\n"
"\n"
"string name       # Behavior name\n"
"string arguments  # Arguments of the behavior\n"
"\n"
;
  }

  static const char* value(const ::aerostack_msgs::BehaviorCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.arguments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::BehaviorCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::BehaviorCommand_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "arguments: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arguments);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_BEHAVIORCOMMAND_H
