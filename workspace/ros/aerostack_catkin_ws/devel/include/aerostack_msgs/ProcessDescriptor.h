// Generated by gencpp from file aerostack_msgs/ProcessDescriptor.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_PROCESSDESCRIPTOR_H
#define AEROSTACK_MSGS_MESSAGE_PROCESSDESCRIPTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <aerostack_msgs/ProcessState.h>

namespace aerostack_msgs
{
template <class ContainerAllocator>
struct ProcessDescriptor_
{
  typedef ProcessDescriptor_<ContainerAllocator> Type;

  ProcessDescriptor_()
    : name()
    , hostname()
    , last_signal()
    , is_alive(false)
    , current_state()  {
    }
  ProcessDescriptor_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , hostname(_alloc)
    , last_signal()
    , is_alive(false)
    , current_state(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hostname_type;
  _hostname_type hostname;

   typedef ros::Time _last_signal_type;
  _last_signal_type last_signal;

   typedef uint8_t _is_alive_type;
  _is_alive_type is_alive;

   typedef  ::aerostack_msgs::ProcessState_<ContainerAllocator>  _current_state_type;
  _current_state_type current_state;





  typedef boost::shared_ptr< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> const> ConstPtr;

}; // struct ProcessDescriptor_

typedef ::aerostack_msgs::ProcessDescriptor_<std::allocator<void> > ProcessDescriptor;

typedef boost::shared_ptr< ::aerostack_msgs::ProcessDescriptor > ProcessDescriptorPtr;
typedef boost::shared_ptr< ::aerostack_msgs::ProcessDescriptor const> ProcessDescriptorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.hostname == rhs.hostname &&
    lhs.last_signal == rhs.last_signal &&
    lhs.is_alive == rhs.is_alive &&
    lhs.current_state == rhs.current_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4601045a840428aad62d83ebbcac8c8b";
  }

  static const char* value(const ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4601045a840428aaULL;
  static const uint64_t static_value2 = 0xd62d83ebbcac8c8bULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/ProcessDescriptor";
  }

  static const char* value(const ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Detailed information about the current state of a process\n"
"\n"
"string name                 # Name of the process \n"
"string hostname             # Name of the host \n"
"time last_signal            # Host of the process\n"
"bool is_alive               # True if is alive\n"
"ProcessState current_state  # Process current state enum\n"
"\n"
"================================================================================\n"
"MSG: aerostack_msgs/ProcessState\n"
"#Current state of a process enum\n"
"\n"
"uint8 state  # State of the process\n"
"\n"
"uint8 Created=1\n"
"uint8 ReadyToStart=2\n"
"uint8 Running=3\n"
"uint8 Paused=4\n"
"uint8 Started=7\n"
"uint8 NotStarted=8\n"
;
  }

  static const char* value(const ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.hostname);
      stream.next(m.last_signal);
      stream.next(m.is_alive);
      stream.next(m.current_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcessDescriptor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::ProcessDescriptor_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "hostname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hostname);
    s << indent << "last_signal: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_signal);
    s << indent << "is_alive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_alive);
    s << indent << "current_state: ";
    s << std::endl;
    Printer< ::aerostack_msgs::ProcessState_<ContainerAllocator> >::stream(s, indent + "  ", v.current_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_PROCESSDESCRIPTOR_H
