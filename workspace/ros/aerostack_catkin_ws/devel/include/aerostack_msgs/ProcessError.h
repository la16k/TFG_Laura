// Generated by gencpp from file aerostack_msgs/ProcessError.msg
// DO NOT EDIT!


#ifndef AEROSTACK_MSGS_MESSAGE_PROCESSERROR_H
#define AEROSTACK_MSGS_MESSAGE_PROCESSERROR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <aerostack_msgs/ErrorType.h>

namespace aerostack_msgs
{
template <class ContainerAllocator>
struct ProcessError_
{
  typedef ProcessError_<ContainerAllocator> Type;

  ProcessError_()
    : header()
    , error_type()
    , ns()
    , hostname()
    , process_name()
    , function()
    , description()
    , reference_code(0)  {
    }
  ProcessError_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , error_type(_alloc)
    , ns(_alloc)
    , hostname(_alloc)
    , process_name(_alloc)
    , function(_alloc)
    , description(_alloc)
    , reference_code(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::aerostack_msgs::ErrorType_<ContainerAllocator>  _error_type_type;
  _error_type_type error_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ns_type;
  _ns_type ns;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hostname_type;
  _hostname_type hostname;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _process_name_type;
  _process_name_type process_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _function_type;
  _function_type function;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef int32_t _reference_code_type;
  _reference_code_type reference_code;





  typedef boost::shared_ptr< ::aerostack_msgs::ProcessError_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aerostack_msgs::ProcessError_<ContainerAllocator> const> ConstPtr;

}; // struct ProcessError_

typedef ::aerostack_msgs::ProcessError_<std::allocator<void> > ProcessError;

typedef boost::shared_ptr< ::aerostack_msgs::ProcessError > ProcessErrorPtr;
typedef boost::shared_ptr< ::aerostack_msgs::ProcessError const> ProcessErrorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aerostack_msgs::ProcessError_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aerostack_msgs::ProcessError_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aerostack_msgs::ProcessError_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ProcessError_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.error_type == rhs.error_type &&
    lhs.ns == rhs.ns &&
    lhs.hostname == rhs.hostname &&
    lhs.process_name == rhs.process_name &&
    lhs.function == rhs.function &&
    lhs.description == rhs.description &&
    lhs.reference_code == rhs.reference_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aerostack_msgs::ProcessError_<ContainerAllocator1> & lhs, const ::aerostack_msgs::ProcessError_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aerostack_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ProcessError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aerostack_msgs::ProcessError_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ProcessError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aerostack_msgs::ProcessError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ProcessError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aerostack_msgs::ProcessError_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aerostack_msgs::ProcessError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2eefb7cab0661f56e0d0f935f91c390";
  }

  static const char* value(const ::aerostack_msgs::ProcessError_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2eefb7cab0661f5ULL;
  static const uint64_t static_value2 = 0x6e0d0f935f91c390ULL;
};

template<class ContainerAllocator>
struct DataType< ::aerostack_msgs::ProcessError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aerostack_msgs/ProcessError";
  }

  static const char* value(const ::aerostack_msgs::ProcessError_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aerostack_msgs::ProcessError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Information about error ocurred in a process\n"
"\n"
"Header header         # Message header\n"
"ErrorType error_type  # Error type enum\n"
"string ns             # Namespace ('ns' used instead of 'namespace' because it is a reserved word)\n"
"string hostname       # Name of the process \n"
"string process_name   # Host of the process\n"
"string function       # Error function\n"
"string description    # Error description\n"
"int32 reference_code  # Error id number\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: aerostack_msgs/ErrorType\n"
"#Error type enum\n"
"\n"
"uint8 value # Error type\n"
"\n"
"uint8 UnexpectedProcessStop=0\n"
"uint8 FrozenNode=1\n"
"uint8 InvalidInputData=2\n"
"uint8 SafeguardRecoverableError=3\n"
"uint8 SafeguarFatalError=4\n"
"\n"
"\n"
;
  }

  static const char* value(const ::aerostack_msgs::ProcessError_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aerostack_msgs::ProcessError_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.error_type);
      stream.next(m.ns);
      stream.next(m.hostname);
      stream.next(m.process_name);
      stream.next(m.function);
      stream.next(m.description);
      stream.next(m.reference_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcessError_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aerostack_msgs::ProcessError_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aerostack_msgs::ProcessError_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "error_type: ";
    s << std::endl;
    Printer< ::aerostack_msgs::ErrorType_<ContainerAllocator> >::stream(s, indent + "  ", v.error_type);
    s << indent << "ns: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ns);
    s << indent << "hostname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hostname);
    s << indent << "process_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.process_name);
    s << indent << "function: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.function);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "reference_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reference_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEROSTACK_MSGS_MESSAGE_PROCESSERROR_H
