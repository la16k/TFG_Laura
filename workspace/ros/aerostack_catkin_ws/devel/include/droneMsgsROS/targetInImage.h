// Generated by gencpp from file droneMsgsROS/targetInImage.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_TARGETINIMAGE_H
#define DRONEMSGSROS_MESSAGE_TARGETINIMAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct targetInImage_
{
  typedef targetInImage_<ContainerAllocator> Type;

  targetInImage_()
    : x(0)
    , y(0)
    , height(0)
    , width(0)
    , id(0)
    , type(0)  {
    }
  targetInImage_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , height(0)
    , width(0)
    , id(0)
    , type(0)  {
  (void)_alloc;
    }



   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::droneMsgsROS::targetInImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::targetInImage_<ContainerAllocator> const> ConstPtr;

}; // struct targetInImage_

typedef ::droneMsgsROS::targetInImage_<std::allocator<void> > targetInImage;

typedef boost::shared_ptr< ::droneMsgsROS::targetInImage > targetInImagePtr;
typedef boost::shared_ptr< ::droneMsgsROS::targetInImage const> targetInImageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::targetInImage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::targetInImage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::targetInImage_<ContainerAllocator1> & lhs, const ::droneMsgsROS::targetInImage_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.id == rhs.id &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::targetInImage_<ContainerAllocator1> & lhs, const ::droneMsgsROS::targetInImage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::targetInImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::targetInImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::targetInImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::targetInImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::targetInImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::targetInImage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::targetInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c80b393e6c1a20624fc0d39a775501fa";
  }

  static const char* value(const ::droneMsgsROS::targetInImage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc80b393e6c1a2062ULL;
  static const uint64_t static_value2 = 0x4fc0d39a775501faULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::targetInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/targetInImage";
  }

  static const char* value(const ::droneMsgsROS::targetInImage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::targetInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#### TARGET IN IMAGE: ROI + ID\n"
"\n"
"\n"
"### ROI -> cv::Rect\n"
"\n"
"#corner\n"
"int32 x\n"
"int32 y\n"
"\n"
"#size\n"
"int32 height\n"
"int32 width\n"
"\n"
"\n"
"### id\n"
"int32 id\n"
"\n"
"## type\n"
"int32 type\n"
"\n"
"\n"
;
  }

  static const char* value(const ::droneMsgsROS::targetInImage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::targetInImage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.id);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct targetInImage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::targetInImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::targetInImage_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_TARGETINIMAGE_H
