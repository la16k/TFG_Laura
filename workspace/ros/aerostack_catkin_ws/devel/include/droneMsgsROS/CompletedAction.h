// Generated by gencpp from file droneMsgsROS/CompletedAction.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_COMPLETEDACTION_H
#define DRONEMSGSROS_MESSAGE_COMPLETEDACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <droneMsgsROS/actionData.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct CompletedAction_
{
  typedef CompletedAction_<ContainerAllocator> Type;

  CompletedAction_()
    : time()
    , final_state(0)
    , timeout(0)
    , action()  {
    }
  CompletedAction_(const ContainerAllocator& _alloc)
    : time()
    , final_state(0)
    , timeout(0)
    , action(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _time_type;
  _time_type time;

   typedef int32_t _final_state_type;
  _final_state_type final_state;

   typedef int32_t _timeout_type;
  _timeout_type timeout;

   typedef  ::droneMsgsROS::actionData_<ContainerAllocator>  _action_type;
  _action_type action;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESSFUL)
  #undef SUCCESSFUL
#endif
#if defined(_WIN32) && defined(TIMEOUT_ACTIVATED)
  #undef TIMEOUT_ACTIVATED
#endif
#if defined(_WIN32) && defined(INTERRUPTED)
  #undef INTERRUPTED
#endif

  enum {
    SUCCESSFUL = 1,
    TIMEOUT_ACTIVATED = 2,
    INTERRUPTED = 3,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::CompletedAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::CompletedAction_<ContainerAllocator> const> ConstPtr;

}; // struct CompletedAction_

typedef ::droneMsgsROS::CompletedAction_<std::allocator<void> > CompletedAction;

typedef boost::shared_ptr< ::droneMsgsROS::CompletedAction > CompletedActionPtr;
typedef boost::shared_ptr< ::droneMsgsROS::CompletedAction const> CompletedActionConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::CompletedAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::CompletedAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::CompletedAction_<ContainerAllocator1> & lhs, const ::droneMsgsROS::CompletedAction_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.final_state == rhs.final_state &&
    lhs.timeout == rhs.timeout &&
    lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::CompletedAction_<ContainerAllocator1> & lhs, const ::droneMsgsROS::CompletedAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::CompletedAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::CompletedAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::CompletedAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::CompletedAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::CompletedAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::CompletedAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::CompletedAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6098c6a56cc231e7d0854dcdb44589e3";
  }

  static const char* value(const ::droneMsgsROS::CompletedAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6098c6a56cc231e7ULL;
  static const uint64_t static_value2 = 0xd0854dcdb44589e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::CompletedAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/CompletedAction";
  }

  static const char* value(const ::droneMsgsROS::CompletedAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::CompletedAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#time\n"
"time time\n"
"\n"
"#Final state\n"
"int32 final_state\n"
"\n"
"#final state possible values\n"
"int32 SUCCESSFUL                       = 1\n"
"int32 TIMEOUT_ACTIVATED                = 2\n"
"int32 INTERRUPTED                      = 3\n"
"\n"
"#Timeout used\n"
"int32 timeout\n"
"\n"
"#action\n"
"actionData action\n"
"\n"
"================================================================================\n"
"MSG: droneMsgsROS/actionData\n"
"#time\n"
"time time\n"
"\n"
"#ack\n"
"bool ack\n"
"\n"
"#MissionPlanner action\n"
"int32 mpAction\n"
"\n"
"int32 TAKE_OFF                   = 1\n"
"int32 HOVER                      = 2\n"
"int32 LAND                       = 3\n"
"int32 STABILIZE                  = 4\n"
"int32 MOVE                       = 5\n"
"int32 GO_TO_POINT                = 6\n"
"int32 ROTATE_YAW                 = 7\n"
"int32 FLIP                       = 8\n"
"int32 FLIP_RIGHT                 = 9\n"
"int32 FLIP_LEFT                  = 10\n"
"int32 FLIP_FRONT                 = 11\n"
"int32 FLIP_BACK                  = 12\n"
"int32 FOLLOW_IMAGE               = 13\n"
"int32 APPROACH_POINT             = 14\n"
"\n"
"int32 UNKNOWN                    = 100\n"
"\n"
"#Arguments\n"
"actionArguments[] arguments\n"
"================================================================================\n"
"MSG: droneMsgsROS/actionArguments\n"
"#Name of the argument that is going to be passed.\n"
"int32 argumentName\n"
"\n"
"int32 DURATION                 = 1\n"
"int32 DESTINATION              = 2\n"
"int32 ROTATION                 = 3\n"
"int32 PRECISION                = 4\n"
"\n"
"#Numerical value\n"
"float64[] value\n"
;
  }

  static const char* value(const ::droneMsgsROS::CompletedAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::CompletedAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.final_state);
      stream.next(m.timeout);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CompletedAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::CompletedAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::CompletedAction_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "final_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.final_state);
    s << indent << "timeout: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeout);
    s << indent << "action: ";
    s << std::endl;
    Printer< ::droneMsgsROS::actionData_<ContainerAllocator> >::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_COMPLETEDACTION_H
