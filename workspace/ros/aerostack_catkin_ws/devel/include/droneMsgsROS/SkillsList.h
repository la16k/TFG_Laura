// Generated by gencpp from file droneMsgsROS/SkillsList.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_SKILLSLIST_H
#define DRONEMSGSROS_MESSAGE_SKILLSLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <droneMsgsROS/SkillDescriptor.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct SkillsList_
{
  typedef SkillsList_<ContainerAllocator> Type;

  SkillsList_()
    : skill_list()  {
    }
  SkillsList_(const ContainerAllocator& _alloc)
    : skill_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::droneMsgsROS::SkillDescriptor_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::droneMsgsROS::SkillDescriptor_<ContainerAllocator> >::other >  _skill_list_type;
  _skill_list_type skill_list;





  typedef boost::shared_ptr< ::droneMsgsROS::SkillsList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::SkillsList_<ContainerAllocator> const> ConstPtr;

}; // struct SkillsList_

typedef ::droneMsgsROS::SkillsList_<std::allocator<void> > SkillsList;

typedef boost::shared_ptr< ::droneMsgsROS::SkillsList > SkillsListPtr;
typedef boost::shared_ptr< ::droneMsgsROS::SkillsList const> SkillsListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::SkillsList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::SkillsList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::SkillsList_<ContainerAllocator1> & lhs, const ::droneMsgsROS::SkillsList_<ContainerAllocator2> & rhs)
{
  return lhs.skill_list == rhs.skill_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::SkillsList_<ContainerAllocator1> & lhs, const ::droneMsgsROS::SkillsList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::SkillsList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::SkillsList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::SkillsList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::SkillsList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::SkillsList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::SkillsList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::SkillsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c5298ab5431e52293fe6708d13dd1f0";
  }

  static const char* value(const ::droneMsgsROS::SkillsList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c5298ab5431e522ULL;
  static const uint64_t static_value2 = 0x93fe6708d13dd1f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::SkillsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/SkillsList";
  }

  static const char* value(const ::droneMsgsROS::SkillsList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::SkillsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SkillDescriptor[] skill_list\n"
"================================================================================\n"
"MSG: droneMsgsROS/SkillDescriptor\n"
"string name\n"
"SkillState current_state\n"
"================================================================================\n"
"MSG: droneMsgsROS/SkillState\n"
"uint8 state\n"
"\n"
"uint8 requested=1\n"
"uint8 not_requested=2\n"
"uint8 approved=3\n"
"uint8 not_approved=4\n"
;
  }

  static const char* value(const ::droneMsgsROS::SkillsList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::SkillsList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.skill_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SkillsList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::SkillsList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::SkillsList_<ContainerAllocator>& v)
  {
    s << indent << "skill_list[]" << std::endl;
    for (size_t i = 0; i < v.skill_list.size(); ++i)
    {
      s << indent << "  skill_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::droneMsgsROS::SkillDescriptor_<ContainerAllocator> >::stream(s, indent + "    ", v.skill_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_SKILLSLIST_H
