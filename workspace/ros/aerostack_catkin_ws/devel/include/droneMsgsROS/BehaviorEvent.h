// Generated by gencpp from file droneMsgsROS/BehaviorEvent.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_BEHAVIOREVENT_H
#define DRONEMSGSROS_MESSAGE_BEHAVIOREVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct BehaviorEvent_
{
  typedef BehaviorEvent_<ContainerAllocator> Type;

  BehaviorEvent_()
    : header()
    , name()
    , uid(0.0)
    , failed_belief()
    , belief_conflict()
    , behavior_event_code()  {
    }
  BehaviorEvent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , uid(0.0)
    , failed_belief(_alloc)
    , belief_conflict(_alloc)
    , behavior_event_code(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef double _uid_type;
  _uid_type uid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _failed_belief_type;
  _failed_belief_type failed_belief;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _belief_conflict_type;
  _belief_conflict_type belief_conflict;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _behavior_event_code_type;
  _behavior_event_code_type behavior_event_code;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GOAL_ACHIEVED)
  #undef GOAL_ACHIEVED
#endif
#if defined(_WIN32) && defined(TIME_OUT)
  #undef TIME_OUT
#endif
#if defined(_WIN32) && defined(WRONG_PROGRESS)
  #undef WRONG_PROGRESS
#endif
#if defined(_WIN32) && defined(ASSUMPTION_CONFLICT)
  #undef ASSUMPTION_CONFLICT
#endif
#if defined(_WIN32) && defined(INTERRUPTED)
  #undef INTERRUPTED
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  GOAL_ACHIEVED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TIME_OUT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  WRONG_PROGRESS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ASSUMPTION_CONFLICT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  INTERRUPTED;

  typedef boost::shared_ptr< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorEvent_

typedef ::droneMsgsROS::BehaviorEvent_<std::allocator<void> > BehaviorEvent;

typedef boost::shared_ptr< ::droneMsgsROS::BehaviorEvent > BehaviorEventPtr;
typedef boost::shared_ptr< ::droneMsgsROS::BehaviorEvent const> BehaviorEventConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      BehaviorEvent_<ContainerAllocator>::GOAL_ACHIEVED =
        
          "GOAL_ACHIEVED"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      BehaviorEvent_<ContainerAllocator>::TIME_OUT =
        
          "TIME_OUT"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      BehaviorEvent_<ContainerAllocator>::WRONG_PROGRESS =
        
          "WRONG_PROGRESS"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      BehaviorEvent_<ContainerAllocator>::ASSUMPTION_CONFLICT =
        
          "ASSUMPTION_CONFLICT"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      BehaviorEvent_<ContainerAllocator>::INTERRUPTED =
        
          "INTERRUPTED"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::BehaviorEvent_<ContainerAllocator1> & lhs, const ::droneMsgsROS::BehaviorEvent_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.uid == rhs.uid &&
    lhs.failed_belief == rhs.failed_belief &&
    lhs.belief_conflict == rhs.belief_conflict &&
    lhs.behavior_event_code == rhs.behavior_event_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::BehaviorEvent_<ContainerAllocator1> & lhs, const ::droneMsgsROS::BehaviorEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "683ce1141e76d8e30dc854dfe50791bd";
  }

  static const char* value(const ::droneMsgsROS::BehaviorEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x683ce1141e76d8e3ULL;
  static const uint64_t static_value2 = 0x0dc854dfe50791bdULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/BehaviorEvent";
  }

  static const char* value(const ::droneMsgsROS::BehaviorEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A behavior event informs about the execution result of a behavior\n"
"\n"
"Header header                   # Message header\n"
"string name                     # Behavior name\n"
"float64 uid                      # UID of the behavior\n"
"string failed_belief            # belief expression of the behavior preconditions that is not satisfied\n"
"string belief_conflict          # belief that generates the failure of the preconditions\n"
"string behavior_event_code      # code of the behavior event\n"
"\n"
"# Possible values for behavior_event_code\n"
"string GOAL_ACHIEVED            = GOAL_ACHIEVED\n"
"string TIME_OUT                 = TIME_OUT\n"
"string WRONG_PROGRESS           = WRONG_PROGRESS\n"
"string ASSUMPTION_CONFLICT      = ASSUMPTION_CONFLICT\n"
"string INTERRUPTED              = INTERRUPTED\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::droneMsgsROS::BehaviorEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.uid);
      stream.next(m.failed_belief);
      stream.next(m.belief_conflict);
      stream.next(m.behavior_event_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::BehaviorEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::BehaviorEvent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "uid: ";
    Printer<double>::stream(s, indent + "  ", v.uid);
    s << indent << "failed_belief: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.failed_belief);
    s << indent << "belief_conflict: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.belief_conflict);
    s << indent << "behavior_event_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.behavior_event_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_BEHAVIOREVENT_H
