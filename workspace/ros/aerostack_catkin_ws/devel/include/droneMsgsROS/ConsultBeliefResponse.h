// Generated by gencpp from file droneMsgsROS/ConsultBeliefResponse.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_CONSULTBELIEFRESPONSE_H
#define DRONEMSGSROS_MESSAGE_CONSULTBELIEFRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct ConsultBeliefResponse_
{
  typedef ConsultBeliefResponse_<ContainerAllocator> Type;

  ConsultBeliefResponse_()
    : success(false)
    , substitutions()  {
    }
  ConsultBeliefResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , substitutions(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _substitutions_type;
  _substitutions_type substitutions;





  typedef boost::shared_ptr< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ConsultBeliefResponse_

typedef ::droneMsgsROS::ConsultBeliefResponse_<std::allocator<void> > ConsultBeliefResponse;

typedef boost::shared_ptr< ::droneMsgsROS::ConsultBeliefResponse > ConsultBeliefResponsePtr;
typedef boost::shared_ptr< ::droneMsgsROS::ConsultBeliefResponse const> ConsultBeliefResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator1> & lhs, const ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.substitutions == rhs.substitutions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator1> & lhs, const ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ed015eaba236f419a01e47db8038860";
  }

  static const char* value(const ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ed015eaba236f41ULL;
  static const uint64_t static_value2 = 0x9a01e47db8038860ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/ConsultBeliefResponse";
  }

  static const char* value(const ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success           # whether a match was found in the belief memory\n"
"\n"
"string substitutions   # The variables that were substituted to achieve the match\n"
"                       # YAML object with the format:\n"
"                       # {var1: substitution1, var2: substitution2 ...}\n"
"# ------------------------------------------------------------------------------\n"
"\n"
;
  }

  static const char* value(const ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.substitutions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConsultBeliefResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::ConsultBeliefResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "substitutions: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.substitutions);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_CONSULTBELIEFRESPONSE_H
