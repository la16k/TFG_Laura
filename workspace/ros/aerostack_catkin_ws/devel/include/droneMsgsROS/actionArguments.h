// Generated by gencpp from file droneMsgsROS/actionArguments.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_ACTIONARGUMENTS_H
#define DRONEMSGSROS_MESSAGE_ACTIONARGUMENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct actionArguments_
{
  typedef actionArguments_<ContainerAllocator> Type;

  actionArguments_()
    : argumentName(0)
    , value()  {
    }
  actionArguments_(const ContainerAllocator& _alloc)
    : argumentName(0)
    , value(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _argumentName_type;
  _argumentName_type argumentName;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DURATION)
  #undef DURATION
#endif
#if defined(_WIN32) && defined(DESTINATION)
  #undef DESTINATION
#endif
#if defined(_WIN32) && defined(ROTATION)
  #undef ROTATION
#endif
#if defined(_WIN32) && defined(PRECISION)
  #undef PRECISION
#endif

  enum {
    DURATION = 1,
    DESTINATION = 2,
    ROTATION = 3,
    PRECISION = 4,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::actionArguments_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::actionArguments_<ContainerAllocator> const> ConstPtr;

}; // struct actionArguments_

typedef ::droneMsgsROS::actionArguments_<std::allocator<void> > actionArguments;

typedef boost::shared_ptr< ::droneMsgsROS::actionArguments > actionArgumentsPtr;
typedef boost::shared_ptr< ::droneMsgsROS::actionArguments const> actionArgumentsConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::actionArguments_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::actionArguments_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::actionArguments_<ContainerAllocator1> & lhs, const ::droneMsgsROS::actionArguments_<ContainerAllocator2> & rhs)
{
  return lhs.argumentName == rhs.argumentName &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::actionArguments_<ContainerAllocator1> & lhs, const ::droneMsgsROS::actionArguments_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::actionArguments_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::actionArguments_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::actionArguments_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::actionArguments_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::actionArguments_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::actionArguments_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::actionArguments_<ContainerAllocator> >
{
  static const char* value()
  {
    return "329542158a51a211e543567dd928eb45";
  }

  static const char* value(const ::droneMsgsROS::actionArguments_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x329542158a51a211ULL;
  static const uint64_t static_value2 = 0xe543567dd928eb45ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::actionArguments_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/actionArguments";
  }

  static const char* value(const ::droneMsgsROS::actionArguments_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::actionArguments_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Name of the argument that is going to be passed.\n"
"int32 argumentName\n"
"\n"
"int32 DURATION                 = 1\n"
"int32 DESTINATION              = 2\n"
"int32 ROTATION                 = 3\n"
"int32 PRECISION                = 4\n"
"\n"
"#Numerical value\n"
"float64[] value\n"
;
  }

  static const char* value(const ::droneMsgsROS::actionArguments_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::actionArguments_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.argumentName);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actionArguments_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::actionArguments_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::actionArguments_<ContainerAllocator>& v)
  {
    s << indent << "argumentName: ";
    Printer<int32_t>::stream(s, indent + "  ", v.argumentName);
    s << indent << "value[]" << std::endl;
    for (size_t i = 0; i < v.value.size(); ++i)
    {
      s << indent << "  value[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.value[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_ACTIONARGUMENTS_H
