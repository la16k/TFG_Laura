// Generated by gencpp from file droneMsgsROS/obstaclesTwoDim.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_OBSTACLESTWODIM_H
#define DRONEMSGSROS_MESSAGE_OBSTACLESTWODIM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <droneMsgsROS/obstacleTwoDimWall.h>
#include <droneMsgsROS/obstacleTwoDimPole.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct obstaclesTwoDim_
{
  typedef obstaclesTwoDim_<ContainerAllocator> Type;

  obstaclesTwoDim_()
    : time(0.0)
    , walls()
    , poles()  {
    }
  obstaclesTwoDim_(const ContainerAllocator& _alloc)
    : time(0.0)
    , walls(_alloc)
    , poles(_alloc)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef std::vector< ::droneMsgsROS::obstacleTwoDimWall_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::droneMsgsROS::obstacleTwoDimWall_<ContainerAllocator> >::other >  _walls_type;
  _walls_type walls;

   typedef std::vector< ::droneMsgsROS::obstacleTwoDimPole_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::droneMsgsROS::obstacleTwoDimPole_<ContainerAllocator> >::other >  _poles_type;
  _poles_type poles;





  typedef boost::shared_ptr< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> const> ConstPtr;

}; // struct obstaclesTwoDim_

typedef ::droneMsgsROS::obstaclesTwoDim_<std::allocator<void> > obstaclesTwoDim;

typedef boost::shared_ptr< ::droneMsgsROS::obstaclesTwoDim > obstaclesTwoDimPtr;
typedef boost::shared_ptr< ::droneMsgsROS::obstaclesTwoDim const> obstaclesTwoDimConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator1> & lhs, const ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.walls == rhs.walls &&
    lhs.poles == rhs.poles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator1> & lhs, const ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fec7deba2b37bd4e40b0e552053315c";
  }

  static const char* value(const ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fec7deba2b37bd4ULL;
  static const uint64_t static_value2 = 0xe40b0e552053315cULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/obstaclesTwoDim";
  }

  static const char* value(const ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#time stamp\n"
"float64 time\n"
"\n"
"#vector of walls\n"
"obstacleTwoDimWall[] walls\n"
"\n"
"#vector of poles\n"
"obstacleTwoDimPole[] poles\n"
"\n"
"\n"
"================================================================================\n"
"MSG: droneMsgsROS/obstacleTwoDimWall\n"
"#id\n"
"int32 id\n"
"\n"
"#position of the center of the obstacle\n"
"float32 centerX\n"
"float32 centerY\n"
"\n"
"#sizes\n"
"float32 sizeX\n"
"float32 sizeY\n"
"\n"
"\n"
"#yaw angle\n"
"float32 yawAngle\n"
"\n"
"\n"
"# flag to determine if the obstacle is real or virtual\n"
"bool isVirtual\n"
"\n"
"\n"
"================================================================================\n"
"MSG: droneMsgsROS/obstacleTwoDimPole\n"
"#id\n"
"int32 id\n"
"\n"
"#position of the center of the obstacle\n"
"float32 centerX\n"
"float32 centerY\n"
"\n"
"#radius\n"
"float32 radiusX\n"
"float32 radiusY\n"
"\n"
"\n"
"#yaw angle\n"
"float32 yawAngle\n"
"\n"
"\n"
"# flag to determine if the obstacle is real or virtual\n"
"bool isVirtual\n"
;
  }

  static const char* value(const ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.walls);
      stream.next(m.poles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obstaclesTwoDim_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::obstaclesTwoDim_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "walls[]" << std::endl;
    for (size_t i = 0; i < v.walls.size(); ++i)
    {
      s << indent << "  walls[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::droneMsgsROS::obstacleTwoDimWall_<ContainerAllocator> >::stream(s, indent + "    ", v.walls[i]);
    }
    s << indent << "poles[]" << std::endl;
    for (size_t i = 0; i < v.poles.size(); ++i)
    {
      s << indent << "  poles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::droneMsgsROS::obstacleTwoDimPole_<ContainerAllocator> >::stream(s, indent + "    ", v.poles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_OBSTACLESTWODIM_H
