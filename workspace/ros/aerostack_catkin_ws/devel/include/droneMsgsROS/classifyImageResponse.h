// Generated by gencpp from file droneMsgsROS/classifyImageResponse.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_CLASSIFYIMAGERESPONSE_H
#define DRONEMSGSROS_MESSAGE_CLASSIFYIMAGERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct classifyImageResponse_
{
  typedef classifyImageResponse_<ContainerAllocator> Type;

  classifyImageResponse_()
    : probs()  {
    }
  classifyImageResponse_(const ContainerAllocator& _alloc)
    : probs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _probs_type;
  _probs_type probs;





  typedef boost::shared_ptr< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> const> ConstPtr;

}; // struct classifyImageResponse_

typedef ::droneMsgsROS::classifyImageResponse_<std::allocator<void> > classifyImageResponse;

typedef boost::shared_ptr< ::droneMsgsROS::classifyImageResponse > classifyImageResponsePtr;
typedef boost::shared_ptr< ::droneMsgsROS::classifyImageResponse const> classifyImageResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::classifyImageResponse_<ContainerAllocator1> & lhs, const ::droneMsgsROS::classifyImageResponse_<ContainerAllocator2> & rhs)
{
  return lhs.probs == rhs.probs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::classifyImageResponse_<ContainerAllocator1> & lhs, const ::droneMsgsROS::classifyImageResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47d9867c355f21d454eb271e7f61b3c8";
  }

  static const char* value(const ::droneMsgsROS::classifyImageResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47d9867c355f21d4ULL;
  static const uint64_t static_value2 = 0x54eb271e7f61b3c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/classifyImageResponse";
  }

  static const char* value(const ::droneMsgsROS::classifyImageResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] probs\n"
"\n"
;
  }

  static const char* value(const ::droneMsgsROS::classifyImageResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.probs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct classifyImageResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::classifyImageResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::classifyImageResponse_<ContainerAllocator>& v)
  {
    s << indent << "probs[]" << std::endl;
    for (size_t i = 0; i < v.probs.size(); ++i)
    {
      s << indent << "  probs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.probs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_CLASSIFYIMAGERESPONSE_H
