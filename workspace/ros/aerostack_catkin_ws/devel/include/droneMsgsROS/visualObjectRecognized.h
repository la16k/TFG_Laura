// Generated by gencpp from file droneMsgsROS/visualObjectRecognized.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_VISUALOBJECTRECOGNIZED_H
#define DRONEMSGSROS_MESSAGE_VISUALOBJECTRECOGNIZED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <opencv_apps/RotatedRect.h>
#include <geometry_msgs/Pose.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct visualObjectRecognized_
{
  typedef visualObjectRecognized_<ContainerAllocator> Type;

  visualObjectRecognized_()
    : recognition_confidence(0.0)
    , rotRect()
    , pose()
    , object_name()
    , object_id(0)
    , drone_id(0)  {
    }
  visualObjectRecognized_(const ContainerAllocator& _alloc)
    : recognition_confidence(0.0)
    , rotRect(_alloc)
    , pose(_alloc)
    , object_name(_alloc)
    , object_id(0)
    , drone_id(0)  {
  (void)_alloc;
    }



   typedef float _recognition_confidence_type;
  _recognition_confidence_type recognition_confidence;

   typedef  ::opencv_apps::RotatedRect_<ContainerAllocator>  _rotRect_type;
  _rotRect_type rotRect;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  _object_name_type object_name;

   typedef uint16_t _object_id_type;
  _object_id_type object_id;

   typedef uint16_t _drone_id_type;
  _drone_id_type drone_id;





  typedef boost::shared_ptr< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> const> ConstPtr;

}; // struct visualObjectRecognized_

typedef ::droneMsgsROS::visualObjectRecognized_<std::allocator<void> > visualObjectRecognized;

typedef boost::shared_ptr< ::droneMsgsROS::visualObjectRecognized > visualObjectRecognizedPtr;
typedef boost::shared_ptr< ::droneMsgsROS::visualObjectRecognized const> visualObjectRecognizedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator1> & lhs, const ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator2> & rhs)
{
  return lhs.recognition_confidence == rhs.recognition_confidence &&
    lhs.rotRect == rhs.rotRect &&
    lhs.pose == rhs.pose &&
    lhs.object_name == rhs.object_name &&
    lhs.object_id == rhs.object_id &&
    lhs.drone_id == rhs.drone_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator1> & lhs, const ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b32b6399bcbfcd180be2706f194fe2b1";
  }

  static const char* value(const ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb32b6399bcbfcd18ULL;
  static const uint64_t static_value2 = 0x0be2706f194fe2b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/visualObjectRecognized";
  }

  static const char* value(const ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#time stamp\n"
"#Header header\n"
"\n"
"float32 recognition_confidence\n"
"\n"
"opencv_apps/RotatedRect rotRect\n"
"\n"
"geometry_msgs/Pose pose\n"
"\n"
"string object_name\n"
"\n"
"uint16 object_id\n"
"\n"
"uint16 drone_id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: opencv_apps/RotatedRect\n"
"float64 angle\n"
"Point2D center\n"
"Size size\n"
"\n"
"================================================================================\n"
"MSG: opencv_apps/Point2D\n"
"float64 x\n"
"float64 y\n"
"\n"
"\n"
"================================================================================\n"
"MSG: opencv_apps/Size\n"
"float64 width\n"
"float64 height\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.recognition_confidence);
      stream.next(m.rotRect);
      stream.next(m.pose);
      stream.next(m.object_name);
      stream.next(m.object_id);
      stream.next(m.drone_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct visualObjectRecognized_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::visualObjectRecognized_<ContainerAllocator>& v)
  {
    s << indent << "recognition_confidence: ";
    Printer<float>::stream(s, indent + "  ", v.recognition_confidence);
    s << indent << "rotRect: ";
    s << std::endl;
    Printer< ::opencv_apps::RotatedRect_<ContainerAllocator> >::stream(s, indent + "  ", v.rotRect);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
    s << indent << "object_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.object_id);
    s << indent << "drone_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.drone_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_VISUALOBJECTRECOGNIZED_H
