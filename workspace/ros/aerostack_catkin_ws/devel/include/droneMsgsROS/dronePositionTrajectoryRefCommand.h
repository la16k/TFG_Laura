// Generated by gencpp from file droneMsgsROS/dronePositionTrajectoryRefCommand.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_DRONEPOSITIONTRAJECTORYREFCOMMAND_H
#define DRONEMSGSROS_MESSAGE_DRONEPOSITIONTRAJECTORYREFCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <droneMsgsROS/dronePositionRefCommand.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct dronePositionTrajectoryRefCommand_
{
  typedef dronePositionTrajectoryRefCommand_<ContainerAllocator> Type;

  dronePositionTrajectoryRefCommand_()
    : header()
    , droneTrajectory()
    , is_periodic(false)
    , initial_checkpoint(0)  {
    }
  dronePositionTrajectoryRefCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , droneTrajectory(_alloc)
    , is_periodic(false)
    , initial_checkpoint(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::droneMsgsROS::dronePositionRefCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::droneMsgsROS::dronePositionRefCommand_<ContainerAllocator> >::other >  _droneTrajectory_type;
  _droneTrajectory_type droneTrajectory;

   typedef uint8_t _is_periodic_type;
  _is_periodic_type is_periodic;

   typedef int32_t _initial_checkpoint_type;
  _initial_checkpoint_type initial_checkpoint;





  typedef boost::shared_ptr< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> const> ConstPtr;

}; // struct dronePositionTrajectoryRefCommand_

typedef ::droneMsgsROS::dronePositionTrajectoryRefCommand_<std::allocator<void> > dronePositionTrajectoryRefCommand;

typedef boost::shared_ptr< ::droneMsgsROS::dronePositionTrajectoryRefCommand > dronePositionTrajectoryRefCommandPtr;
typedef boost::shared_ptr< ::droneMsgsROS::dronePositionTrajectoryRefCommand const> dronePositionTrajectoryRefCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator1> & lhs, const ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.droneTrajectory == rhs.droneTrajectory &&
    lhs.is_periodic == rhs.is_periodic &&
    lhs.initial_checkpoint == rhs.initial_checkpoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator1> & lhs, const ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82c4b8542ff9e473841891893eb23f86";
  }

  static const char* value(const ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82c4b8542ff9e473ULL;
  static const uint64_t static_value2 = 0x841891893eb23f86ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/dronePositionTrajectoryRefCommand";
  }

  static const char* value(const ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Timestamp and sequence number\n"
"Header header\n"
"\n"
"#vector of points of the trajectory\n"
"dronePositionRefCommand[] 	droneTrajectory\n"
"bool  			is_periodic\n"
"int32 			initial_checkpoint # usually 1\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: droneMsgsROS/dronePositionRefCommand\n"
"#position\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.droneTrajectory);
      stream.next(m.is_periodic);
      stream.next(m.initial_checkpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dronePositionTrajectoryRefCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::dronePositionTrajectoryRefCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "droneTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.droneTrajectory.size(); ++i)
    {
      s << indent << "  droneTrajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::droneMsgsROS::dronePositionRefCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.droneTrajectory[i]);
    }
    s << indent << "is_periodic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_periodic);
    s << indent << "initial_checkpoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.initial_checkpoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_DRONEPOSITIONTRAJECTORYREFCOMMAND_H
