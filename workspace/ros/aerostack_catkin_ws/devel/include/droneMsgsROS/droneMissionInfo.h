// Generated by gencpp from file droneMsgsROS/droneMissionInfo.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_DRONEMISSIONINFO_H
#define DRONEMSGSROS_MESSAGE_DRONEMISSIONINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct droneMissionInfo_
{
  typedef droneMissionInfo_<ContainerAllocator> Type;

  droneMissionInfo_()
    : timeMsgs()
    , durationMission()
    , durationSubmission()
    , idSubmission(0)
    , loopSubmission(false)
    , durationTask()
    , idTask(0)
    , taskType(0)
    , taskState(0)  {
    }
  droneMissionInfo_(const ContainerAllocator& _alloc)
    : timeMsgs()
    , durationMission()
    , durationSubmission()
    , idSubmission(0)
    , loopSubmission(false)
    , durationTask()
    , idTask(0)
    , taskType(0)
    , taskState(0)  {
  (void)_alloc;
    }



   typedef ros::Time _timeMsgs_type;
  _timeMsgs_type timeMsgs;

   typedef ros::Duration _durationMission_type;
  _durationMission_type durationMission;

   typedef ros::Duration _durationSubmission_type;
  _durationSubmission_type durationSubmission;

   typedef int32_t _idSubmission_type;
  _idSubmission_type idSubmission;

   typedef uint8_t _loopSubmission_type;
  _loopSubmission_type loopSubmission;

   typedef ros::Duration _durationTask_type;
  _durationTask_type durationTask;

   typedef int32_t _idTask_type;
  _idTask_type idTask;

   typedef int32_t _taskType_type;
  _taskType_type taskType;

   typedef int32_t _taskState_type;
  _taskState_type taskState;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(WAITING_BRAIN)
  #undef WAITING_BRAIN
#endif
#if defined(_WIN32) && defined(TASK_RUNNING)
  #undef TASK_RUNNING
#endif

  enum {
    WAITING_BRAIN = 1,
    TASK_RUNNING = 2,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct droneMissionInfo_

typedef ::droneMsgsROS::droneMissionInfo_<std::allocator<void> > droneMissionInfo;

typedef boost::shared_ptr< ::droneMsgsROS::droneMissionInfo > droneMissionInfoPtr;
typedef boost::shared_ptr< ::droneMsgsROS::droneMissionInfo const> droneMissionInfoConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::droneMissionInfo_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneMissionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.timeMsgs == rhs.timeMsgs &&
    lhs.durationMission == rhs.durationMission &&
    lhs.durationSubmission == rhs.durationSubmission &&
    lhs.idSubmission == rhs.idSubmission &&
    lhs.loopSubmission == rhs.loopSubmission &&
    lhs.durationTask == rhs.durationTask &&
    lhs.idTask == rhs.idTask &&
    lhs.taskType == rhs.taskType &&
    lhs.taskState == rhs.taskState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::droneMissionInfo_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneMissionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3d990f88d65decaf8bdb780d3a3cbea";
  }

  static const char* value(const ::droneMsgsROS::droneMissionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3d990f88d65decaULL;
  static const uint64_t static_value2 = 0xf8bdb780d3a3cbeaULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/droneMissionInfo";
  }

  static const char* value(const ::droneMsgsROS::droneMissionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#time\n"
"time timeMsgs\n"
"\n"
"##### mission\n"
"duration durationMission\n"
"\n"
"##### subtask\n"
"duration durationSubmission\n"
"int32 idSubmission\n"
"bool loopSubmission\n"
"\n"
"\n"
"##### task\n"
"duration durationTask\n"
"int32 idTask\n"
"int32 taskType \n"
"\n"
"#task state\n"
"int32 taskState\n"
"int32 WAITING_BRAIN=1\n"
"int32 TASK_RUNNING=2\n"
;
  }

  static const char* value(const ::droneMsgsROS::droneMissionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeMsgs);
      stream.next(m.durationMission);
      stream.next(m.durationSubmission);
      stream.next(m.idSubmission);
      stream.next(m.loopSubmission);
      stream.next(m.durationTask);
      stream.next(m.idTask);
      stream.next(m.taskType);
      stream.next(m.taskState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct droneMissionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::droneMissionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::droneMissionInfo_<ContainerAllocator>& v)
  {
    s << indent << "timeMsgs: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timeMsgs);
    s << indent << "durationMission: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.durationMission);
    s << indent << "durationSubmission: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.durationSubmission);
    s << indent << "idSubmission: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idSubmission);
    s << indent << "loopSubmission: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.loopSubmission);
    s << indent << "durationTask: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.durationTask);
    s << indent << "idTask: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idTask);
    s << indent << "taskType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.taskType);
    s << indent << "taskState: ";
    Printer<int32_t>::stream(s, indent + "  ", v.taskState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_DRONEMISSIONINFO_H
