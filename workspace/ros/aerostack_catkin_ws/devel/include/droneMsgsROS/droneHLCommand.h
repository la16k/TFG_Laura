// Generated by gencpp from file droneMsgsROS/droneHLCommand.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_DRONEHLCOMMAND_H
#define DRONEMSGSROS_MESSAGE_DRONEHLCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct droneHLCommand_
{
  typedef droneHLCommand_<ContainerAllocator> Type;

  droneHLCommand_()
    : time()
    , hlCommand(0)  {
    }
  droneHLCommand_(const ContainerAllocator& _alloc)
    : time()
    , hlCommand(0)  {
  (void)_alloc;
    }



   typedef ros::Time _time_type;
  _time_type time;

   typedef int32_t _hlCommand_type;
  _hlCommand_type hlCommand;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TAKE_OFF)
  #undef TAKE_OFF
#endif
#if defined(_WIN32) && defined(HOVER)
  #undef HOVER
#endif
#if defined(_WIN32) && defined(LAND)
  #undef LAND
#endif
#if defined(_WIN32) && defined(MOVE_TRAJECTORY)
  #undef MOVE_TRAJECTORY
#endif
#if defined(_WIN32) && defined(START_CONTROLLER)
  #undef START_CONTROLLER
#endif
#if defined(_WIN32) && defined(SLEEP)
  #undef SLEEP
#endif
#if defined(_WIN32) && defined(ABORT_LANDING_AND_TAKE_OFF)
  #undef ABORT_LANDING_AND_TAKE_OFF
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    TAKE_OFF = 1,
    HOVER = 2,
    LAND = 3,
    MOVE_TRAJECTORY = 4,
    START_CONTROLLER = 4,
    SLEEP = 5,
    ABORT_LANDING_AND_TAKE_OFF = 6,
    UNKNOWN = 100,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> const> ConstPtr;

}; // struct droneHLCommand_

typedef ::droneMsgsROS::droneHLCommand_<std::allocator<void> > droneHLCommand;

typedef boost::shared_ptr< ::droneMsgsROS::droneHLCommand > droneHLCommandPtr;
typedef boost::shared_ptr< ::droneMsgsROS::droneHLCommand const> droneHLCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::droneHLCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::droneHLCommand_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneHLCommand_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.hlCommand == rhs.hlCommand;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::droneHLCommand_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneHLCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "526456556b36b75a909a954dfe628419";
  }

  static const char* value(const ::droneMsgsROS::droneHLCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x526456556b36b75aULL;
  static const uint64_t static_value2 = 0x909a954dfe628419ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/droneHLCommand";
  }

  static const char* value(const ::droneMsgsROS::droneHLCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#time\n"
"time time\n"
"\n"
"\n"
"#HL command\n"
"int32 hlCommand \n"
"\n"
"int32 TAKE_OFF                   = 1\n"
"int32 HOVER                      = 2\n"
"int32 LAND                       = 3\n"
"int32 MOVE_TRAJECTORY            = 4\n"
"int32 START_CONTROLLER           = 4\n"
"int32 SLEEP                      = 5\n"
"int32 ABORT_LANDING_AND_TAKE_OFF = 6\n"
"\n"
"int32 UNKNOWN=100\n"
;
  }

  static const char* value(const ::droneMsgsROS::droneHLCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.hlCommand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct droneHLCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::droneHLCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::droneHLCommand_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "hlCommand: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hlCommand);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_DRONEHLCOMMAND_H
