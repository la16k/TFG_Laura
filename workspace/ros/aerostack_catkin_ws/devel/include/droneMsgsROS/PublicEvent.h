// Generated by gencpp from file droneMsgsROS/PublicEvent.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_PUBLICEVENT_H
#define DRONEMSGSROS_MESSAGE_PUBLICEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <droneMsgsROS/Event.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct PublicEvent_
{
  typedef PublicEvent_<ContainerAllocator> Type;

  PublicEvent_()
    : header()
    , author()
    , event()  {
    }
  PublicEvent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , author(_alloc)
    , event(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _author_type;
  _author_type author;

   typedef  ::droneMsgsROS::Event_<ContainerAllocator>  _event_type;
  _event_type event;





  typedef boost::shared_ptr< ::droneMsgsROS::PublicEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::PublicEvent_<ContainerAllocator> const> ConstPtr;

}; // struct PublicEvent_

typedef ::droneMsgsROS::PublicEvent_<std::allocator<void> > PublicEvent;

typedef boost::shared_ptr< ::droneMsgsROS::PublicEvent > PublicEventPtr;
typedef boost::shared_ptr< ::droneMsgsROS::PublicEvent const> PublicEventConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::PublicEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::PublicEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::PublicEvent_<ContainerAllocator1> & lhs, const ::droneMsgsROS::PublicEvent_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.author == rhs.author &&
    lhs.event == rhs.event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::PublicEvent_<ContainerAllocator1> & lhs, const ::droneMsgsROS::PublicEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::PublicEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::PublicEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::PublicEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::PublicEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::PublicEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::PublicEvent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::PublicEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c69b1a72b0fc3d8da35eba1b95c50ed";
  }

  static const char* value(const ::droneMsgsROS::PublicEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c69b1a72b0fc3d8ULL;
  static const uint64_t static_value2 = 0xda35eba1b95c50edULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::PublicEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/PublicEvent";
  }

  static const char* value(const ::droneMsgsROS::PublicEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::PublicEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"#Author of the event\n"
"string author\n"
"\n"
"#Event broadcasted\n"
"Event event\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: droneMsgsROS/Event\n"
"Header header\n"
"\n"
"# Categories\n"
"int32 BATTERY_PERCENTAGE_CHANGED = 1\n"
"int32 ARUCO_MARKERS_RECOGNIZED = 2\n"
"int32 ACTION_INITIATED = 3\n"
"int32 ACTION_COMPLETED = 4\n"
"int32 APPROACH_REQUESTED = 5\n"
"int32 ARUCO_MARKERS_RECOGNIZED_BY_OTHERS = 6\n"
"int32 MISSION_STATE_CHANGED = 7\n"
"int32 OPERATOR_MESSAGE_RECOGNIZED = 8\n"
"\n"
"int32 category\n"
"string[] arguments\n"
;
  }

  static const char* value(const ::droneMsgsROS::PublicEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::PublicEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.author);
      stream.next(m.event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PublicEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::PublicEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::PublicEvent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "author: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.author);
    s << indent << "event: ";
    s << std::endl;
    Printer< ::droneMsgsROS::Event_<ContainerAllocator> >::stream(s, indent + "  ", v.event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_PUBLICEVENT_H
