// Generated by gencpp from file droneMsgsROS/setInitDroneYaw_srv_typeRequest.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_SETINITDRONEYAW_SRV_TYPEREQUEST_H
#define DRONEMSGSROS_MESSAGE_SETINITDRONEYAW_SRV_TYPEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct setInitDroneYaw_srv_typeRequest_
{
  typedef setInitDroneYaw_srv_typeRequest_<ContainerAllocator> Type;

  setInitDroneYaw_srv_typeRequest_()
    : yaw_droneLMrT_telemetry_rad(0.0)  {
    }
  setInitDroneYaw_srv_typeRequest_(const ContainerAllocator& _alloc)
    : yaw_droneLMrT_telemetry_rad(0.0)  {
  (void)_alloc;
    }



   typedef float _yaw_droneLMrT_telemetry_rad_type;
  _yaw_droneLMrT_telemetry_rad_type yaw_droneLMrT_telemetry_rad;





  typedef boost::shared_ptr< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct setInitDroneYaw_srv_typeRequest_

typedef ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<std::allocator<void> > setInitDroneYaw_srv_typeRequest;

typedef boost::shared_ptr< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest > setInitDroneYaw_srv_typeRequestPtr;
typedef boost::shared_ptr< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest const> setInitDroneYaw_srv_typeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator1> & lhs, const ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.yaw_droneLMrT_telemetry_rad == rhs.yaw_droneLMrT_telemetry_rad;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator1> & lhs, const ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5996afcc978549e471e2d638bba5b801";
  }

  static const char* value(const ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5996afcc978549e4ULL;
  static const uint64_t static_value2 = 0x71e2d638bba5b801ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/setInitDroneYaw_srv_typeRequest";
  }

  static const char* value(const ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# send the initial float to the parrot StateEstimator, that MUST be taken into account\n"
"# float32 yaw_droneLMrT_telemetry_rad\n"
"# bool 		ack, is data ok?\n"
"\n"
"float32 yaw_droneLMrT_telemetry_rad\n"
"\n"
;
  }

  static const char* value(const ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yaw_droneLMrT_telemetry_rad);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct setInitDroneYaw_srv_typeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::setInitDroneYaw_srv_typeRequest_<ContainerAllocator>& v)
  {
    s << indent << "yaw_droneLMrT_telemetry_rad: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_droneLMrT_telemetry_rad);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_SETINITDRONEYAW_SRV_TYPEREQUEST_H
