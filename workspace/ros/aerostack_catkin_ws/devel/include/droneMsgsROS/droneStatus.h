// Generated by gencpp from file droneMsgsROS/droneStatus.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_DRONESTATUS_H
#define DRONEMSGSROS_MESSAGE_DRONESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct droneStatus_
{
  typedef droneStatus_<ContainerAllocator> Type;

  droneStatus_()
    : header()
    , status(0)  {
    }
  droneStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(INITED)
  #undef INITED
#endif
#if defined(_WIN32) && defined(LANDED)
  #undef LANDED
#endif
#if defined(_WIN32) && defined(FLYING)
  #undef FLYING
#endif
#if defined(_WIN32) && defined(HOVERING)
  #undef HOVERING
#endif
#if defined(_WIN32) && defined(TAKING_OFF)
  #undef TAKING_OFF
#endif
#if defined(_WIN32) && defined(LANDING)
  #undef LANDING
#endif
#if defined(_WIN32) && defined(LOOPING)
  #undef LOOPING
#endif
#if defined(_WIN32) && defined(EMERGENCY)
  #undef EMERGENCY
#endif

  enum {
    UNKNOWN = 0,
    INITED = 1,
    LANDED = 2,
    FLYING = 3,
    HOVERING = 4,
    TAKING_OFF = 6,
    LANDING = 8,
    LOOPING = 9,
    EMERGENCY = 0,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::droneStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::droneStatus_<ContainerAllocator> const> ConstPtr;

}; // struct droneStatus_

typedef ::droneMsgsROS::droneStatus_<std::allocator<void> > droneStatus;

typedef boost::shared_ptr< ::droneMsgsROS::droneStatus > droneStatusPtr;
typedef boost::shared_ptr< ::droneMsgsROS::droneStatus const> droneStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::droneStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::droneStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::droneStatus_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::droneStatus_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::droneStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f7e87be463179c074133442c536bba2";
  }

  static const char* value(const ::droneMsgsROS::droneStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f7e87be463179c0ULL;
  static const uint64_t static_value2 = 0x74133442c536bba2ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::droneStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/droneStatus";
  }

  static const char* value(const ::droneMsgsROS::droneStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::droneStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Header\n"
"Header header\n"
"\n"
"\n"
"#Status of the drone\n"
"int32 status\n"
"\n"
"# Drone State names declaration\n"
"#  [*] To avoid problems make sure that the corresponding enum<->int values\n"
"#  are the same as in lib_cvgutils/src/include/drone_utils/drone_state_enum.h\n"
"#  [*] Important, drone_state_enum is defined to have the same enum<->int value\n"
"#  correspondance as the ardrone (when using the ardrone_autonomy).\n"
"\n"
"#Predefined status\n"
"int32 UNKNOWN          = 0  # Emergency mode in parrot, Unknown for other quads\n"
"int32 INITED           = 1\n"
"int32 LANDED           = 2\n"
"int32 FLYING           = 3\n"
"int32 HOVERING         = 4\n"
"# int32 TEST           = 5\n"
"int32 TAKING_OFF       = 6\n"
"# int32 GOTO_FIX_POINT = 7\n"
"int32 LANDING          = 8\n"
"int32 LOOPING          = 9  # Only used with the parrot\n"
"int32 EMERGENCY        = 0  # Emergency mode for other quads\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::droneMsgsROS::droneStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::droneStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct droneStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::droneStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::droneStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_DRONESTATUS_H
