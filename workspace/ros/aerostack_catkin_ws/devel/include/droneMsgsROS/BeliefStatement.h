// Generated by gencpp from file droneMsgsROS/BeliefStatement.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_BELIEFSTATEMENT_H
#define DRONEMSGSROS_MESSAGE_BELIEFSTATEMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct BeliefStatement_
{
  typedef BeliefStatement_<ContainerAllocator> Type;

  BeliefStatement_()
    : emitter()
    , belief()
    , multivalued(false)
    , remove(false)  {
    }
  BeliefStatement_(const ContainerAllocator& _alloc)
    : emitter(_alloc)
    , belief(_alloc)
    , multivalued(false)
    , remove(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _emitter_type;
  _emitter_type emitter;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _belief_type;
  _belief_type belief;

   typedef uint8_t _multivalued_type;
  _multivalued_type multivalued;

   typedef uint8_t _remove_type;
  _remove_type remove;





  typedef boost::shared_ptr< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> const> ConstPtr;

}; // struct BeliefStatement_

typedef ::droneMsgsROS::BeliefStatement_<std::allocator<void> > BeliefStatement;

typedef boost::shared_ptr< ::droneMsgsROS::BeliefStatement > BeliefStatementPtr;
typedef boost::shared_ptr< ::droneMsgsROS::BeliefStatement const> BeliefStatementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::BeliefStatement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::BeliefStatement_<ContainerAllocator1> & lhs, const ::droneMsgsROS::BeliefStatement_<ContainerAllocator2> & rhs)
{
  return lhs.emitter == rhs.emitter &&
    lhs.belief == rhs.belief &&
    lhs.multivalued == rhs.multivalued &&
    lhs.remove == rhs.remove;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::BeliefStatement_<ContainerAllocator1> & lhs, const ::droneMsgsROS::BeliefStatement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcaa391d4ecae38ef0902c257f9d8386";
  }

  static const char* value(const ::droneMsgsROS::BeliefStatement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfcaa391d4ecae38eULL;
  static const uint64_t static_value2 = 0xf0902c257f9d8386ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/BeliefStatement";
  }

  static const char* value(const ::droneMsgsROS::BeliefStatement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A behavior event informs about the execution result of a behavior\n"
"\n"
"string emitter        # who emmitted the message -- 'drone_1', 'drone_2', ...\n"
"\n"
"string belief\n"
"bool multivalued\n"
"bool remove\n"
;
  }

  static const char* value(const ::droneMsgsROS::BeliefStatement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.emitter);
      stream.next(m.belief);
      stream.next(m.multivalued);
      stream.next(m.remove);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BeliefStatement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::BeliefStatement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::BeliefStatement_<ContainerAllocator>& v)
  {
    s << indent << "emitter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.emitter);
    s << indent << "belief: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.belief);
    s << indent << "multivalued: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.multivalued);
    s << indent << "remove: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remove);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_BELIEFSTATEMENT_H
