// Generated by gencpp from file droneMsgsROS/droneTask.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_DRONETASK_H
#define DRONEMSGSROS_MESSAGE_DRONETASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <droneMsgsROS/vector3f.h>
#include <droneMsgsROS/vector3f.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct droneTask_
{
  typedef droneTask_<ContainerAllocator> Type;

  droneTask_()
    : time(0)
    , mpCommand(0)
    , yaw(0.0)
    , speech_name()
    , module_names()
    , point()
    , pointToLook()
    , yawSelector(0)  {
    }
  droneTask_(const ContainerAllocator& _alloc)
    : time(0)
    , mpCommand(0)
    , yaw(0.0)
    , speech_name(_alloc)
    , module_names(_alloc)
    , point(_alloc)
    , pointToLook(_alloc)
    , yawSelector(0)  {
  (void)_alloc;
    }



   typedef int32_t _time_type;
  _time_type time;

   typedef int32_t _mpCommand_type;
  _mpCommand_type mpCommand;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _speech_name_type;
  _speech_name_type speech_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _module_names_type;
  _module_names_type module_names;

   typedef  ::droneMsgsROS::vector3f_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef  ::droneMsgsROS::vector3f_<ContainerAllocator>  _pointToLook_type;
  _pointToLook_type pointToLook;

   typedef int32_t _yawSelector_type;
  _yawSelector_type yawSelector;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TAKE_OFF)
  #undef TAKE_OFF
#endif
#if defined(_WIN32) && defined(HOVER)
  #undef HOVER
#endif
#if defined(_WIN32) && defined(LAND)
  #undef LAND
#endif
#if defined(_WIN32) && defined(START_CONTROLLER)
  #undef START_CONTROLLER
#endif
#if defined(_WIN32) && defined(SLEEP)
  #undef SLEEP
#endif
#if defined(_WIN32) && defined(ABORT_LANDING_AND_TAKE_OFF)
  #undef ABORT_LANDING_AND_TAKE_OFF
#endif
#if defined(_WIN32) && defined(MOVE_MANUAL_ALTITUD)
  #undef MOVE_MANUAL_ALTITUD
#endif
#if defined(_WIN32) && defined(MOVE_MANUAL_THRUST)
  #undef MOVE_MANUAL_THRUST
#endif
#if defined(_WIN32) && defined(MOVE_POSITION)
  #undef MOVE_POSITION
#endif
#if defined(_WIN32) && defined(MOVE_SPEED)
  #undef MOVE_SPEED
#endif
#if defined(_WIN32) && defined(MOVE_TRAJECTORY)
  #undef MOVE_TRAJECTORY
#endif
#if defined(_WIN32) && defined(MOVE_VISUAL_SERVOING)
  #undef MOVE_VISUAL_SERVOING
#endif
#if defined(_WIN32) && defined(HOVERING_VISUAL_SERVOING)
  #undef HOVERING_VISUAL_SERVOING
#endif
#if defined(_WIN32) && defined(EMERGENCY)
  #undef EMERGENCY
#endif
#if defined(_WIN32) && defined(MOVE_FLIP)
  #undef MOVE_FLIP
#endif
#if defined(_WIN32) && defined(MOVE_FLIP_RIGHT)
  #undef MOVE_FLIP_RIGHT
#endif
#if defined(_WIN32) && defined(MOVE_FLIP_LEFT)
  #undef MOVE_FLIP_LEFT
#endif
#if defined(_WIN32) && defined(MOVE_FLIP_FRONT)
  #undef MOVE_FLIP_FRONT
#endif
#if defined(_WIN32) && defined(MOVE_FLIP_BACK)
  #undef MOVE_FLIP_BACK
#endif
#if defined(_WIN32) && defined(MOVE_EMERGENCY)
  #undef MOVE_EMERGENCY
#endif
#if defined(_WIN32) && defined(LAND_AUTONOMOUS)
  #undef LAND_AUTONOMOUS
#endif
#if defined(_WIN32) && defined(MOVE_VISUAL_SERVOING_RL)
  #undef MOVE_VISUAL_SERVOING_RL
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    TAKE_OFF = 1,
    HOVER = 2,
    LAND = 3,
    START_CONTROLLER = 4,
    SLEEP = 5,
    ABORT_LANDING_AND_TAKE_OFF = 6,
    MOVE_MANUAL_ALTITUD = 7,
    MOVE_MANUAL_THRUST = 8,
    MOVE_POSITION = 9,
    MOVE_SPEED = 10,
    MOVE_TRAJECTORY = 11,
    MOVE_VISUAL_SERVOING = 12,
    HOVERING_VISUAL_SERVOING = 13,
    EMERGENCY = 14,
    MOVE_FLIP = 15,
    MOVE_FLIP_RIGHT = 16,
    MOVE_FLIP_LEFT = 17,
    MOVE_FLIP_FRONT = 18,
    MOVE_FLIP_BACK = 19,
    MOVE_EMERGENCY = 20,
    LAND_AUTONOMOUS = 21,
    MOVE_VISUAL_SERVOING_RL = 22,
    UNKNOWN = 100,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::droneTask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::droneTask_<ContainerAllocator> const> ConstPtr;

}; // struct droneTask_

typedef ::droneMsgsROS::droneTask_<std::allocator<void> > droneTask;

typedef boost::shared_ptr< ::droneMsgsROS::droneTask > droneTaskPtr;
typedef boost::shared_ptr< ::droneMsgsROS::droneTask const> droneTaskConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::droneTask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::droneTask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::droneTask_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneTask_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.mpCommand == rhs.mpCommand &&
    lhs.yaw == rhs.yaw &&
    lhs.speech_name == rhs.speech_name &&
    lhs.module_names == rhs.module_names &&
    lhs.point == rhs.point &&
    lhs.pointToLook == rhs.pointToLook &&
    lhs.yawSelector == rhs.yawSelector;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::droneTask_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneTask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneTask_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneTask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::droneTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "19c50e338827bfba091aba1b9adf1597";
  }

  static const char* value(const ::droneMsgsROS::droneTask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x19c50e338827bfbaULL;
  static const uint64_t static_value2 = 0x091aba1b9adf1597ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::droneTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/droneTask";
  }

  static const char* value(const ::droneMsgsROS::droneTask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::droneTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Task struct \n"
"\n"
"int32 time\n"
"\n"
"\n"
"int32 mpCommand \n"
"\n"
"int32 TAKE_OFF                   = 1\n"
"int32 HOVER                      = 2\n"
"int32 LAND                       = 3\n"
"int32 START_CONTROLLER           = 4\n"
"int32 SLEEP                      = 5\n"
"int32 ABORT_LANDING_AND_TAKE_OFF = 6\n"
"int32 MOVE_MANUAL_ALTITUD        = 7\n"
"int32 MOVE_MANUAL_THRUST         = 8\n"
"int32 MOVE_POSITION              = 9\n"
"int32 MOVE_SPEED                 = 10\n"
"int32 MOVE_TRAJECTORY            = 11\n"
"int32 MOVE_VISUAL_SERVOING       = 12\n"
"int32 HOVERING_VISUAL_SERVOING   = 13\n"
"int32 EMERGENCY                  = 14\n"
"int32 MOVE_FLIP                  = 15\n"
"int32 MOVE_FLIP_RIGHT            = 16\n"
"int32 MOVE_FLIP_LEFT             = 17\n"
"int32 MOVE_FLIP_FRONT            = 18\n"
"int32 MOVE_FLIP_BACK             = 19\n"
"int32 MOVE_EMERGENCY             = 20\n"
"int32 LAND_AUTONOMOUS            = 21\n"
"int32 MOVE_VISUAL_SERVOING_RL    = 22\n"
"int32 UNKNOWN                    = 100\n"
"\n"
"float32 yaw\n"
"\n"
"string speech_name\n"
"\n"
"#This Modules are going to be sent by the Mission Planner or HMI\n"
"#to the ManagerOfActions for activating some optional modules\n"
"string[] module_names\n"
"\n"
"#Used for Moving Tasks\n"
"vector3f point\n"
"\n"
"vector3f pointToLook\n"
"\n"
"int32 yawSelector\n"
"#yawSelector == 0 means no Yaw nor PointToLook\n"
"#yawSelector == 1 means MOVE in YAW\n"
"#yawSelector == 2 means MOVE with PointToLook\n"
"\n"
"\n"
"================================================================================\n"
"MSG: droneMsgsROS/vector3f\n"
"#This message has the information of a 3D point (float)\n"
"\n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
;
  }

  static const char* value(const ::droneMsgsROS::droneTask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::droneTask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.mpCommand);
      stream.next(m.yaw);
      stream.next(m.speech_name);
      stream.next(m.module_names);
      stream.next(m.point);
      stream.next(m.pointToLook);
      stream.next(m.yawSelector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct droneTask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::droneTask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::droneTask_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time);
    s << indent << "mpCommand: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mpCommand);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "speech_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.speech_name);
    s << indent << "module_names[]" << std::endl;
    for (size_t i = 0; i < v.module_names.size(); ++i)
    {
      s << indent << "  module_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.module_names[i]);
    }
    s << indent << "point: ";
    s << std::endl;
    Printer< ::droneMsgsROS::vector3f_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "pointToLook: ";
    s << std::endl;
    Printer< ::droneMsgsROS::vector3f_<ContainerAllocator> >::stream(s, indent + "  ", v.pointToLook);
    s << indent << "yawSelector: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yawSelector);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_DRONETASK_H
