// Generated by gencpp from file droneMsgsROS/landmarkVector.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_LANDMARKVECTOR_H
#define DRONEMSGSROS_MESSAGE_LANDMARKVECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <droneMsgsROS/Landmark3D.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct landmarkVector_
{
  typedef landmarkVector_<ContainerAllocator> Type;

  landmarkVector_()
    : time(0.0)
    , landmark_vector()  {
    }
  landmarkVector_(const ContainerAllocator& _alloc)
    : time(0.0)
    , landmark_vector(_alloc)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef std::vector< ::droneMsgsROS::Landmark3D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::droneMsgsROS::Landmark3D_<ContainerAllocator> >::other >  _landmark_vector_type;
  _landmark_vector_type landmark_vector;





  typedef boost::shared_ptr< ::droneMsgsROS::landmarkVector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::landmarkVector_<ContainerAllocator> const> ConstPtr;

}; // struct landmarkVector_

typedef ::droneMsgsROS::landmarkVector_<std::allocator<void> > landmarkVector;

typedef boost::shared_ptr< ::droneMsgsROS::landmarkVector > landmarkVectorPtr;
typedef boost::shared_ptr< ::droneMsgsROS::landmarkVector const> landmarkVectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::landmarkVector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::landmarkVector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::landmarkVector_<ContainerAllocator1> & lhs, const ::droneMsgsROS::landmarkVector_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.landmark_vector == rhs.landmark_vector;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::landmarkVector_<ContainerAllocator1> & lhs, const ::droneMsgsROS::landmarkVector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::landmarkVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::landmarkVector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::landmarkVector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::landmarkVector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::landmarkVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::landmarkVector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::landmarkVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a46156e0bae4f6a8a2e2a83a8585c69d";
  }

  static const char* value(const ::droneMsgsROS::landmarkVector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa46156e0bae4f6a8ULL;
  static const uint64_t static_value2 = 0xa2e2a83a8585c69dULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::landmarkVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/landmarkVector";
  }

  static const char* value(const ::droneMsgsROS::landmarkVector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::landmarkVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#time stamp\n"
"float64 time\n"
"\n"
"#vector of landmarks\n"
"Landmark3D[] landmark_vector\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: droneMsgsROS/Landmark3D\n"
"#pose\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 yaw\n"
"float32 pitch\n"
"float32 roll\n"
"\n"
"int32 id\n"
"\n"
"int32 is_known\n"
;
  }

  static const char* value(const ::droneMsgsROS::landmarkVector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::landmarkVector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.landmark_vector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct landmarkVector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::landmarkVector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::landmarkVector_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "landmark_vector[]" << std::endl;
    for (size_t i = 0; i < v.landmark_vector.size(); ++i)
    {
      s << indent << "  landmark_vector[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::droneMsgsROS::Landmark3D_<ContainerAllocator> >::stream(s, indent + "    ", v.landmark_vector[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_LANDMARKVECTOR_H
