// Generated by gencpp from file droneMsgsROS/askForModuleResponse.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_ASKFORMODULERESPONSE_H
#define DRONEMSGSROS_MESSAGE_ASKFORMODULERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct askForModuleResponse_
{
  typedef askForModuleResponse_<ContainerAllocator> Type;

  askForModuleResponse_()
    : ack(false)  {
    }
  askForModuleResponse_(const ContainerAllocator& _alloc)
    : ack(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ack_type;
  _ack_type ack;





  typedef boost::shared_ptr< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct askForModuleResponse_

typedef ::droneMsgsROS::askForModuleResponse_<std::allocator<void> > askForModuleResponse;

typedef boost::shared_ptr< ::droneMsgsROS::askForModuleResponse > askForModuleResponsePtr;
typedef boost::shared_ptr< ::droneMsgsROS::askForModuleResponse const> askForModuleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::askForModuleResponse_<ContainerAllocator1> & lhs, const ::droneMsgsROS::askForModuleResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ack == rhs.ack;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::askForModuleResponse_<ContainerAllocator1> & lhs, const ::droneMsgsROS::askForModuleResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f5729177853f34b146e2e57766d4dc2";
  }

  static const char* value(const ::droneMsgsROS::askForModuleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f5729177853f34bULL;
  static const uint64_t static_value2 = 0x146e2e57766d4dc2ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/askForModuleResponse";
  }

  static const char* value(const ::droneMsgsROS::askForModuleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool ack\n"
"\n"
;
  }

  static const char* value(const ::droneMsgsROS::askForModuleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ack);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct askForModuleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::askForModuleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::askForModuleResponse_<ContainerAllocator>& v)
  {
    s << indent << "ack: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ack);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_ASKFORMODULERESPONSE_H
