// Generated by gencpp from file droneMsgsROS/AllBeliefs.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_ALLBELIEFS_H
#define DRONEMSGSROS_MESSAGE_ALLBELIEFS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct AllBeliefs_
{
  typedef AllBeliefs_<ContainerAllocator> Type;

  AllBeliefs_()
    : beliefs()  {
    }
  AllBeliefs_(const ContainerAllocator& _alloc)
    : beliefs(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _beliefs_type;
  _beliefs_type beliefs;





  typedef boost::shared_ptr< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> const> ConstPtr;

}; // struct AllBeliefs_

typedef ::droneMsgsROS::AllBeliefs_<std::allocator<void> > AllBeliefs;

typedef boost::shared_ptr< ::droneMsgsROS::AllBeliefs > AllBeliefsPtr;
typedef boost::shared_ptr< ::droneMsgsROS::AllBeliefs const> AllBeliefsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::AllBeliefs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::AllBeliefs_<ContainerAllocator1> & lhs, const ::droneMsgsROS::AllBeliefs_<ContainerAllocator2> & rhs)
{
  return lhs.beliefs == rhs.beliefs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::AllBeliefs_<ContainerAllocator1> & lhs, const ::droneMsgsROS::AllBeliefs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "206fdb5e59153890eb999c9ca4a92778";
  }

  static const char* value(const ::droneMsgsROS::AllBeliefs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x206fdb5e59153890ULL;
  static const uint64_t static_value2 = 0xeb999c9ca4a92778ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/AllBeliefs";
  }

  static const char* value(const ::droneMsgsROS::AllBeliefs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MESSAGE TYPE: AllBeliefs\n"
"# ------------------------------------------------------------------------------\n"
"# This message contains a string with all of the beliefs in memory\n"
"\n"
"string beliefs        # newline-separated list of beliefs\n"
"# ------------------------------------------------------------------------------\n"
;
  }

  static const char* value(const ::droneMsgsROS::AllBeliefs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.beliefs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AllBeliefs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::AllBeliefs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::AllBeliefs_<ContainerAllocator>& v)
  {
    s << indent << "beliefs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.beliefs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_ALLBELIEFS_H
