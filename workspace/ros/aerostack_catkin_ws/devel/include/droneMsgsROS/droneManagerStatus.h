// Generated by gencpp from file droneMsgsROS/droneManagerStatus.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_DRONEMANAGERSTATUS_H
#define DRONEMSGSROS_MESSAGE_DRONEMANAGERSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct droneManagerStatus_
{
  typedef droneManagerStatus_<ContainerAllocator> Type;

  droneManagerStatus_()
    : header()
    , status(0)  {
    }
  droneManagerStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TAKINGOFF)
  #undef TAKINGOFF
#endif
#if defined(_WIN32) && defined(HOVERING)
  #undef HOVERING
#endif
#if defined(_WIN32) && defined(LANDING)
  #undef LANDING
#endif
#if defined(_WIN32) && defined(LANDED)
  #undef LANDED
#endif
#if defined(_WIN32) && defined(SLEEPING)
  #undef SLEEPING
#endif
#if defined(_WIN32) && defined(MOVING_MANUAL_ALTITUD)
  #undef MOVING_MANUAL_ALTITUD
#endif
#if defined(_WIN32) && defined(MOVING_MANUAL_THRUST)
  #undef MOVING_MANUAL_THRUST
#endif
#if defined(_WIN32) && defined(MOVING_POSITION)
  #undef MOVING_POSITION
#endif
#if defined(_WIN32) && defined(MOVING_SPEED)
  #undef MOVING_SPEED
#endif
#if defined(_WIN32) && defined(MOVING_TRAJECTORY)
  #undef MOVING_TRAJECTORY
#endif
#if defined(_WIN32) && defined(MOVING_VISUAL_SERVOING)
  #undef MOVING_VISUAL_SERVOING
#endif
#if defined(_WIN32) && defined(HOVERING_VISUAL_SERVOING)
  #undef HOVERING_VISUAL_SERVOING
#endif
#if defined(_WIN32) && defined(EMERGENCY)
  #undef EMERGENCY
#endif
#if defined(_WIN32) && defined(MOVING_FLIP)
  #undef MOVING_FLIP
#endif
#if defined(_WIN32) && defined(MOVING_FLIP_RIGHT)
  #undef MOVING_FLIP_RIGHT
#endif
#if defined(_WIN32) && defined(MOVING_FLIP_LEFT)
  #undef MOVING_FLIP_LEFT
#endif
#if defined(_WIN32) && defined(MOVING_FLIP_FRONT)
  #undef MOVING_FLIP_FRONT
#endif
#if defined(_WIN32) && defined(MOVING_FLIP_BACK)
  #undef MOVING_FLIP_BACK
#endif
#if defined(_WIN32) && defined(MOVING_EMERGENCY)
  #undef MOVING_EMERGENCY
#endif
#if defined(_WIN32) && defined(LANDING_AUTONOMOUS)
  #undef LANDING_AUTONOMOUS
#endif
#if defined(_WIN32) && defined(MOVE_VISUAL_SERVOING_RL)
  #undef MOVE_VISUAL_SERVOING_RL
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    TAKINGOFF = 1,
    HOVERING = 2,
    LANDING = 3,
    LANDED = 4,
    SLEEPING = 5,
    MOVING_MANUAL_ALTITUD = 7,
    MOVING_MANUAL_THRUST = 8,
    MOVING_POSITION = 9,
    MOVING_SPEED = 10,
    MOVING_TRAJECTORY = 11,
    MOVING_VISUAL_SERVOING = 12,
    HOVERING_VISUAL_SERVOING = 13,
    EMERGENCY = 14,
    MOVING_FLIP = 15,
    MOVING_FLIP_RIGHT = 16,
    MOVING_FLIP_LEFT = 17,
    MOVING_FLIP_FRONT = 18,
    MOVING_FLIP_BACK = 19,
    MOVING_EMERGENCY = 20,
    LANDING_AUTONOMOUS = 21,
    MOVE_VISUAL_SERVOING_RL = 22,
    UNKNOWN = 100,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct droneManagerStatus_

typedef ::droneMsgsROS::droneManagerStatus_<std::allocator<void> > droneManagerStatus;

typedef boost::shared_ptr< ::droneMsgsROS::droneManagerStatus > droneManagerStatusPtr;
typedef boost::shared_ptr< ::droneMsgsROS::droneManagerStatus const> droneManagerStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::droneManagerStatus_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneManagerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::droneManagerStatus_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneManagerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1acf637429d50a55968b4a1c25279cbd";
  }

  static const char* value(const ::droneMsgsROS::droneManagerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1acf637429d50a55ULL;
  static const uint64_t static_value2 = 0x968b4a1c25279cbdULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/droneManagerStatus";
  }

  static const char* value(const ::droneMsgsROS::droneManagerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Header\n"
"Header header\n"
"\n"
"\n"
"#Status of the Manager of Actions\n"
"int32 status\n"
"\n"
"\n"
"\n"
"#Predefined status\n"
"int32 TAKINGOFF			                = 1\n"
"int32 HOVERING			                = 2\n"
"int32 LANDING 			                = 3\n"
"int32 LANDED           		          = 4\n"
"int32 SLEEPING                      = 5\n"
"#int32 ABORT_LANDING_AND_TAKE_OFF   = 6\n"
"int32 MOVING_MANUAL_ALTITUD         = 7\n"
"int32 MOVING_MANUAL_THRUST          = 8\n"
"int32 MOVING_POSITION               = 9\n"
"int32 MOVING_SPEED                  = 10\n"
"int32 MOVING_TRAJECTORY             = 11\n"
"int32 MOVING_VISUAL_SERVOING        = 12\n"
"int32 HOVERING_VISUAL_SERVOING      = 13\n"
"int32 EMERGENCY                     = 14\n"
"int32 MOVING_FLIP                   = 15\n"
"int32 MOVING_FLIP_RIGHT             = 16\n"
"int32 MOVING_FLIP_LEFT              = 17\n"
"int32 MOVING_FLIP_FRONT             = 18\n"
"int32 MOVING_FLIP_BACK              = 19\n"
"int32 MOVING_EMERGENCY              = 20\n"
"int32 LANDING_AUTONOMOUS            = 21\n"
"int32 MOVE_VISUAL_SERVOING_RL       = 22\n"
"int32 UNKNOWN                       = 100\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::droneMsgsROS::droneManagerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct droneManagerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::droneManagerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::droneManagerStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_DRONEMANAGERSTATUS_H
