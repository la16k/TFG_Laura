// Generated by gencpp from file droneMsgsROS/CheckBehaviorGroupConsistencyRequest.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_CHECKBEHAVIORGROUPCONSISTENCYREQUEST_H
#define DRONEMSGSROS_MESSAGE_CHECKBEHAVIORGROUPCONSISTENCYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <droneMsgsROS/BehaviorCommand.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct CheckBehaviorGroupConsistencyRequest_
{
  typedef CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> Type;

  CheckBehaviorGroupConsistencyRequest_()
    : behavior_name()
    , active_behaviors()  {
    }
  CheckBehaviorGroupConsistencyRequest_(const ContainerAllocator& _alloc)
    : behavior_name(_alloc)
    , active_behaviors(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _behavior_name_type;
  _behavior_name_type behavior_name;

   typedef std::vector< ::droneMsgsROS::BehaviorCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::droneMsgsROS::BehaviorCommand_<ContainerAllocator> >::other >  _active_behaviors_type;
  _active_behaviors_type active_behaviors;





  typedef boost::shared_ptr< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CheckBehaviorGroupConsistencyRequest_

typedef ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<std::allocator<void> > CheckBehaviorGroupConsistencyRequest;

typedef boost::shared_ptr< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest > CheckBehaviorGroupConsistencyRequestPtr;
typedef boost::shared_ptr< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest const> CheckBehaviorGroupConsistencyRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator1> & lhs, const ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator2> & rhs)
{
  return lhs.behavior_name == rhs.behavior_name &&
    lhs.active_behaviors == rhs.active_behaviors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator1> & lhs, const ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8553cfebe294bd60eb5c220999b530ed";
  }

  static const char* value(const ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8553cfebe294bd60ULL;
  static const uint64_t static_value2 = 0xeb5c220999b530edULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/CheckBehaviorGroupConsistencyRequest";
  }

  static const char* value(const ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This service checks if a behavior request is consistent with a set of active behaviors\n"
"\n"
"string behavior_name                # name of the behavior request\n"
"BehaviorCommand[] active_behaviors  # list of active behaviors\n"
"\n"
"================================================================================\n"
"MSG: droneMsgsROS/BehaviorCommand\n"
"# A behavior command is a request to execute a behavior with a set of arguments\n"
"\n"
"string name       # behavior name\n"
"string arguments  # arguments of the behavior\n"
;
  }

  static const char* value(const ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.behavior_name);
      stream.next(m.active_behaviors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckBehaviorGroupConsistencyRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::CheckBehaviorGroupConsistencyRequest_<ContainerAllocator>& v)
  {
    s << indent << "behavior_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.behavior_name);
    s << indent << "active_behaviors[]" << std::endl;
    for (size_t i = 0; i < v.active_behaviors.size(); ++i)
    {
      s << indent << "  active_behaviors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::droneMsgsROS::BehaviorCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.active_behaviors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_CHECKBEHAVIORGROUPCONSISTENCYREQUEST_H
