// Generated by gencpp from file droneMsgsROS/dronePerceptionManagerMissionState.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_DRONEPERCEPTIONMANAGERMISSIONSTATE_H
#define DRONEMSGSROS_MESSAGE_DRONEPERCEPTIONMANAGERMISSIONSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct dronePerceptionManagerMissionState_
{
  typedef dronePerceptionManagerMissionState_<ContainerAllocator> Type;

  dronePerceptionManagerMissionState_()
    : submission_state(0)  {
    }
  dronePerceptionManagerMissionState_(const ContainerAllocator& _alloc)
    : submission_state(0)  {
  (void)_alloc;
    }



   typedef int32_t _submission_state_type;
  _submission_state_type submission_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EXPLORING)
  #undef EXPLORING
#endif
#if defined(_WIN32) && defined(PICK_RED_OBJECT)
  #undef PICK_RED_OBJECT
#endif
#if defined(_WIN32) && defined(PICK_BLUE_OBJECT)
  #undef PICK_BLUE_OBJECT
#endif
#if defined(_WIN32) && defined(RELEASE_RED_OBJECT)
  #undef RELEASE_RED_OBJECT
#endif
#if defined(_WIN32) && defined(RELEASE_BLUE_OBJECT)
  #undef RELEASE_BLUE_OBJECT
#endif

  enum {
    EXPLORING = 1,
    PICK_RED_OBJECT = 2,
    PICK_BLUE_OBJECT = 3,
    RELEASE_RED_OBJECT = 4,
    RELEASE_BLUE_OBJECT = 5,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> const> ConstPtr;

}; // struct dronePerceptionManagerMissionState_

typedef ::droneMsgsROS::dronePerceptionManagerMissionState_<std::allocator<void> > dronePerceptionManagerMissionState;

typedef boost::shared_ptr< ::droneMsgsROS::dronePerceptionManagerMissionState > dronePerceptionManagerMissionStatePtr;
typedef boost::shared_ptr< ::droneMsgsROS::dronePerceptionManagerMissionState const> dronePerceptionManagerMissionStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator1> & lhs, const ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator2> & rhs)
{
  return lhs.submission_state == rhs.submission_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator1> & lhs, const ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bd07c0d2f53b5a672de39bb19821b00";
  }

  static const char* value(const ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bd07c0d2f53b5a6ULL;
  static const uint64_t static_value2 = 0x72de39bb19821b00ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/dronePerceptionManagerMissionState";
  }

  static const char* value(const ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#time stamp\n"
"#Header header\n"
"\n"
"#SubMission state\n"
"int32 submission_state\n"
"\n"
"int32 EXPLORING               = 1\n"
"int32 PICK_RED_OBJECT         = 2\n"
"int32 PICK_BLUE_OBJECT        = 3\n"
"int32 RELEASE_RED_OBJECT      = 4\n"
"int32 RELEASE_BLUE_OBJECT     = 5\n"
;
  }

  static const char* value(const ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.submission_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dronePerceptionManagerMissionState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::dronePerceptionManagerMissionState_<ContainerAllocator>& v)
  {
    s << indent << "submission_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.submission_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_DRONEPERCEPTIONMANAGERMISSIONSTATE_H
