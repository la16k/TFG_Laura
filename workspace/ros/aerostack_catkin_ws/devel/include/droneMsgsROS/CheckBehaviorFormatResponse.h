// Generated by gencpp from file droneMsgsROS/CheckBehaviorFormatResponse.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_CHECKBEHAVIORFORMATRESPONSE_H
#define DRONEMSGSROS_MESSAGE_CHECKBEHAVIORFORMATRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct CheckBehaviorFormatResponse_
{
  typedef CheckBehaviorFormatResponse_<ContainerAllocator> Type;

  CheckBehaviorFormatResponse_()
    : ack(false)
    , error_message()
    , behavior_error_code(0)
    , failed_belief()
    , belief_conflict()  {
    }
  CheckBehaviorFormatResponse_(const ContainerAllocator& _alloc)
    : ack(false)
    , error_message(_alloc)
    , behavior_error_code(0)
    , failed_belief(_alloc)
    , belief_conflict(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _ack_type;
  _ack_type ack;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_message_type;
  _error_message_type error_message;

   typedef int32_t _behavior_error_code_type;
  _behavior_error_code_type behavior_error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _failed_belief_type;
  _failed_belief_type failed_belief;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _belief_conflict_type;
  _belief_conflict_type belief_conflict;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BEHAVIOR_VALUE_INCORRECT)
  #undef BEHAVIOR_VALUE_INCORRECT
#endif
#if defined(_WIN32) && defined(ASSUMPTION_CONFLICT)
  #undef ASSUMPTION_CONFLICT
#endif

  enum {
    BEHAVIOR_VALUE_INCORRECT = 1,
    ASSUMPTION_CONFLICT = 2,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CheckBehaviorFormatResponse_

typedef ::droneMsgsROS::CheckBehaviorFormatResponse_<std::allocator<void> > CheckBehaviorFormatResponse;

typedef boost::shared_ptr< ::droneMsgsROS::CheckBehaviorFormatResponse > CheckBehaviorFormatResponsePtr;
typedef boost::shared_ptr< ::droneMsgsROS::CheckBehaviorFormatResponse const> CheckBehaviorFormatResponseConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator1> & lhs, const ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ack == rhs.ack &&
    lhs.error_message == rhs.error_message &&
    lhs.behavior_error_code == rhs.behavior_error_code &&
    lhs.failed_belief == rhs.failed_belief &&
    lhs.belief_conflict == rhs.belief_conflict;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator1> & lhs, const ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "302b6d1bd04d7b119d5c61159fde1555";
  }

  static const char* value(const ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x302b6d1bd04d7b11ULL;
  static const uint64_t static_value2 = 0x9d5c61159fde1555ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/CheckBehaviorFormatResponse";
  }

  static const char* value(const ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ack                            # If this value is true, the behavior has been activated correctly\n"
"\n"
"string error_message                # If the above variable is false, an error is contained inside this variable\n"
"\n"
"int32 behavior_error_code           # The type of error occurred\n"
"int32 BEHAVIOR_VALUE_INCORRECT = 1\n"
"int32 ASSUMPTION_CONFLICT      = 2\n"
"\n"
"string failed_belief\n"
"\n"
"string belief_conflict\n"
"\n"
;
  }

  static const char* value(const ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ack);
      stream.next(m.error_message);
      stream.next(m.behavior_error_code);
      stream.next(m.failed_belief);
      stream.next(m.belief_conflict);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckBehaviorFormatResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::CheckBehaviorFormatResponse_<ContainerAllocator>& v)
  {
    s << indent << "ack: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ack);
    s << indent << "error_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_message);
    s << indent << "behavior_error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behavior_error_code);
    s << indent << "failed_belief: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.failed_belief);
    s << indent << "belief_conflict: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.belief_conflict);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_CHECKBEHAVIORFORMATRESPONSE_H
