// Generated by gencpp from file droneMsgsROS/droneMissionPlannerCommand.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_DRONEMISSIONPLANNERCOMMAND_H
#define DRONEMSGSROS_MESSAGE_DRONEMISSIONPLANNERCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct droneMissionPlannerCommand_
{
  typedef droneMissionPlannerCommand_<ContainerAllocator> Type;

  droneMissionPlannerCommand_()
    : time()
    , mpCommand(0)
    , drone_modules_names()  {
    }
  droneMissionPlannerCommand_(const ContainerAllocator& _alloc)
    : time()
    , mpCommand(0)
    , drone_modules_names(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _time_type;
  _time_type time;

   typedef int32_t _mpCommand_type;
  _mpCommand_type mpCommand;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _drone_modules_names_type;
  _drone_modules_names_type drone_modules_names;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TAKE_OFF)
  #undef TAKE_OFF
#endif
#if defined(_WIN32) && defined(HOVER)
  #undef HOVER
#endif
#if defined(_WIN32) && defined(LAND)
  #undef LAND
#endif
#if defined(_WIN32) && defined(START_CONTROLLER)
  #undef START_CONTROLLER
#endif
#if defined(_WIN32) && defined(SLEEP)
  #undef SLEEP
#endif
#if defined(_WIN32) && defined(ABORT_LANDING_AND_TAKE_OFF)
  #undef ABORT_LANDING_AND_TAKE_OFF
#endif
#if defined(_WIN32) && defined(MOVE_MANUAL_ALTITUD)
  #undef MOVE_MANUAL_ALTITUD
#endif
#if defined(_WIN32) && defined(MOVE_MANUAL_THRUST)
  #undef MOVE_MANUAL_THRUST
#endif
#if defined(_WIN32) && defined(MOVE_POSITION)
  #undef MOVE_POSITION
#endif
#if defined(_WIN32) && defined(MOVE_SPEED)
  #undef MOVE_SPEED
#endif
#if defined(_WIN32) && defined(MOVE_TRAJECTORY)
  #undef MOVE_TRAJECTORY
#endif
#if defined(_WIN32) && defined(MOVE_VISUAL_SERVOING)
  #undef MOVE_VISUAL_SERVOING
#endif
#if defined(_WIN32) && defined(HOVERING_VISUAL_SERVOING)
  #undef HOVERING_VISUAL_SERVOING
#endif
#if defined(_WIN32) && defined(EMERGENCY)
  #undef EMERGENCY
#endif
#if defined(_WIN32) && defined(MOVE_FLIP)
  #undef MOVE_FLIP
#endif
#if defined(_WIN32) && defined(MOVE_FLIP_RIGHT)
  #undef MOVE_FLIP_RIGHT
#endif
#if defined(_WIN32) && defined(MOVE_FLIP_LEFT)
  #undef MOVE_FLIP_LEFT
#endif
#if defined(_WIN32) && defined(MOVE_FLIP_FRONT)
  #undef MOVE_FLIP_FRONT
#endif
#if defined(_WIN32) && defined(MOVE_FLIP_BACK)
  #undef MOVE_FLIP_BACK
#endif
#if defined(_WIN32) && defined(MOVE_EMERGENCY)
  #undef MOVE_EMERGENCY
#endif
#if defined(_WIN32) && defined(LAND_AUTONOMOUS)
  #undef LAND_AUTONOMOUS
#endif
#if defined(_WIN32) && defined(MOVE_VISUAL_SERVOING_RL)
  #undef MOVE_VISUAL_SERVOING_RL
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    TAKE_OFF = 1,
    HOVER = 2,
    LAND = 3,
    START_CONTROLLER = 4,
    SLEEP = 5,
    ABORT_LANDING_AND_TAKE_OFF = 6,
    MOVE_MANUAL_ALTITUD = 7,
    MOVE_MANUAL_THRUST = 8,
    MOVE_POSITION = 9,
    MOVE_SPEED = 10,
    MOVE_TRAJECTORY = 11,
    MOVE_VISUAL_SERVOING = 12,
    HOVERING_VISUAL_SERVOING = 13,
    EMERGENCY = 14,
    MOVE_FLIP = 15,
    MOVE_FLIP_RIGHT = 16,
    MOVE_FLIP_LEFT = 17,
    MOVE_FLIP_FRONT = 18,
    MOVE_FLIP_BACK = 19,
    MOVE_EMERGENCY = 20,
    LAND_AUTONOMOUS = 21,
    MOVE_VISUAL_SERVOING_RL = 22,
    UNKNOWN = 100,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> const> ConstPtr;

}; // struct droneMissionPlannerCommand_

typedef ::droneMsgsROS::droneMissionPlannerCommand_<std::allocator<void> > droneMissionPlannerCommand;

typedef boost::shared_ptr< ::droneMsgsROS::droneMissionPlannerCommand > droneMissionPlannerCommandPtr;
typedef boost::shared_ptr< ::droneMsgsROS::droneMissionPlannerCommand const> droneMissionPlannerCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.mpCommand == rhs.mpCommand &&
    lhs.drone_modules_names == rhs.drone_modules_names;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator1> & lhs, const ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f51807b0500137ad274f8ff492a4196d";
  }

  static const char* value(const ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf51807b0500137adULL;
  static const uint64_t static_value2 = 0x274f8ff492a4196dULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/droneMissionPlannerCommand";
  }

  static const char* value(const ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#time\n"
"time time\n"
"\n"
"\n"
"#MissionPlanner command\n"
"int32 mpCommand \n"
"\n"
"int32 TAKE_OFF                    = 1\n"
"int32 HOVER                       = 2\n"
"int32 LAND                        = 3\n"
"int32 START_CONTROLLER            = 4\n"
"int32 SLEEP                       = 5\n"
"int32 ABORT_LANDING_AND_TAKE_OFF  = 6\n"
"int32 MOVE_MANUAL_ALTITUD         = 7\n"
"int32 MOVE_MANUAL_THRUST          = 8\n"
"int32 MOVE_POSITION               = 9\n"
"int32 MOVE_SPEED                  = 10\n"
"int32 MOVE_TRAJECTORY             = 11\n"
"int32 MOVE_VISUAL_SERVOING        = 12\n"
"int32 HOVERING_VISUAL_SERVOING    = 13\n"
"int32 EMERGENCY                   = 14\n"
"int32 MOVE_FLIP                   = 15\n"
"int32 MOVE_FLIP_RIGHT             = 16\n"
"int32 MOVE_FLIP_LEFT              = 17\n"
"int32 MOVE_FLIP_FRONT             = 18\n"
"int32 MOVE_FLIP_BACK              = 19\n"
"int32 MOVE_EMERGENCY              = 20\n"
"int32 LAND_AUTONOMOUS             = 21\n"
"int32 MOVE_VISUAL_SERVOING_RL     = 22\n"
"int32 UNKNOWN                     = 100\n"
"\n"
"#This Modules are going to be sent by the Mission Planner or HMI\n"
"#to the ManagerOfActions for activating some optional modules\n"
"string[] drone_modules_names\n"
;
  }

  static const char* value(const ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.mpCommand);
      stream.next(m.drone_modules_names);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct droneMissionPlannerCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::droneMissionPlannerCommand_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "mpCommand: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mpCommand);
    s << indent << "drone_modules_names[]" << std::endl;
    for (size_t i = 0; i < v.drone_modules_names.size(); ++i)
    {
      s << indent << "  drone_modules_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.drone_modules_names[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_DRONEMISSIONPLANNERCOMMAND_H
