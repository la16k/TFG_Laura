// Generated by gencpp from file droneMsgsROS/Event.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_EVENT_H
#define DRONEMSGSROS_MESSAGE_EVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct Event_
{
  typedef Event_<ContainerAllocator> Type;

  Event_()
    : header()
    , category(0)
    , arguments()  {
    }
  Event_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , category(0)
    , arguments(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _category_type;
  _category_type category;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _arguments_type;
  _arguments_type arguments;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BATTERY_PERCENTAGE_CHANGED)
  #undef BATTERY_PERCENTAGE_CHANGED
#endif
#if defined(_WIN32) && defined(ARUCO_MARKERS_RECOGNIZED)
  #undef ARUCO_MARKERS_RECOGNIZED
#endif
#if defined(_WIN32) && defined(ACTION_INITIATED)
  #undef ACTION_INITIATED
#endif
#if defined(_WIN32) && defined(ACTION_COMPLETED)
  #undef ACTION_COMPLETED
#endif
#if defined(_WIN32) && defined(APPROACH_REQUESTED)
  #undef APPROACH_REQUESTED
#endif
#if defined(_WIN32) && defined(ARUCO_MARKERS_RECOGNIZED_BY_OTHERS)
  #undef ARUCO_MARKERS_RECOGNIZED_BY_OTHERS
#endif
#if defined(_WIN32) && defined(MISSION_STATE_CHANGED)
  #undef MISSION_STATE_CHANGED
#endif
#if defined(_WIN32) && defined(OPERATOR_MESSAGE_RECOGNIZED)
  #undef OPERATOR_MESSAGE_RECOGNIZED
#endif

  enum {
    BATTERY_PERCENTAGE_CHANGED = 1,
    ARUCO_MARKERS_RECOGNIZED = 2,
    ACTION_INITIATED = 3,
    ACTION_COMPLETED = 4,
    APPROACH_REQUESTED = 5,
    ARUCO_MARKERS_RECOGNIZED_BY_OTHERS = 6,
    MISSION_STATE_CHANGED = 7,
    OPERATOR_MESSAGE_RECOGNIZED = 8,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::Event_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::Event_<ContainerAllocator> const> ConstPtr;

}; // struct Event_

typedef ::droneMsgsROS::Event_<std::allocator<void> > Event;

typedef boost::shared_ptr< ::droneMsgsROS::Event > EventPtr;
typedef boost::shared_ptr< ::droneMsgsROS::Event const> EventConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::Event_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::Event_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::Event_<ContainerAllocator1> & lhs, const ::droneMsgsROS::Event_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.category == rhs.category &&
    lhs.arguments == rhs.arguments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::Event_<ContainerAllocator1> & lhs, const ::droneMsgsROS::Event_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::Event_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::Event_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::Event_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::Event_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::Event_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::Event_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::Event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2bf3ec5dd63fd771bfb32d458b09afd";
  }

  static const char* value(const ::droneMsgsROS::Event_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2bf3ec5dd63fd77ULL;
  static const uint64_t static_value2 = 0x1bfb32d458b09afdULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::Event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/Event";
  }

  static const char* value(const ::droneMsgsROS::Event_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::Event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Categories\n"
"int32 BATTERY_PERCENTAGE_CHANGED = 1\n"
"int32 ARUCO_MARKERS_RECOGNIZED = 2\n"
"int32 ACTION_INITIATED = 3\n"
"int32 ACTION_COMPLETED = 4\n"
"int32 APPROACH_REQUESTED = 5\n"
"int32 ARUCO_MARKERS_RECOGNIZED_BY_OTHERS = 6\n"
"int32 MISSION_STATE_CHANGED = 7\n"
"int32 OPERATOR_MESSAGE_RECOGNIZED = 8\n"
"\n"
"int32 category\n"
"string[] arguments\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::droneMsgsROS::Event_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::Event_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.category);
      stream.next(m.arguments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Event_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::Event_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::Event_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "category: ";
    Printer<int32_t>::stream(s, indent + "  ", v.category);
    s << indent << "arguments[]" << std::endl;
    for (size_t i = 0; i < v.arguments.size(); ++i)
    {
      s << indent << "  arguments[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arguments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_EVENT_H
