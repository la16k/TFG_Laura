// Generated by gencpp from file droneMsgsROS/imageFeaturesIBVS.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_IMAGEFEATURESIBVS_H
#define DRONEMSGSROS_MESSAGE_IMAGEFEATURESIBVS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct imageFeaturesIBVS_
{
  typedef imageFeaturesIBVS_<ContainerAllocator> Type;

  imageFeaturesIBVS_()
    : time(0.0)
    , fx(0.0)
    , fy(0.0)
    , fs(0.0)
    , fD(0.0)  {
    }
  imageFeaturesIBVS_(const ContainerAllocator& _alloc)
    : time(0.0)
    , fx(0.0)
    , fy(0.0)
    , fs(0.0)
    , fD(0.0)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef float _fx_type;
  _fx_type fx;

   typedef float _fy_type;
  _fy_type fy;

   typedef float _fs_type;
  _fs_type fs;

   typedef float _fD_type;
  _fD_type fD;





  typedef boost::shared_ptr< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> const> ConstPtr;

}; // struct imageFeaturesIBVS_

typedef ::droneMsgsROS::imageFeaturesIBVS_<std::allocator<void> > imageFeaturesIBVS;

typedef boost::shared_ptr< ::droneMsgsROS::imageFeaturesIBVS > imageFeaturesIBVSPtr;
typedef boost::shared_ptr< ::droneMsgsROS::imageFeaturesIBVS const> imageFeaturesIBVSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator1> & lhs, const ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.fx == rhs.fx &&
    lhs.fy == rhs.fy &&
    lhs.fs == rhs.fs &&
    lhs.fD == rhs.fD;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator1> & lhs, const ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34a4b897185c6daccebb2529f239f9f5";
  }

  static const char* value(const ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34a4b897185c6dacULL;
  static const uint64_t static_value2 = 0xcebb2529f239f9f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/imageFeaturesIBVS";
  }

  static const char* value(const ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# time stamp\n"
"float64 time\n"
"\n"
"# image features: \n"
"#  fx centroid horizontal\n"
"#  fy centroid vertical\n"
"#  fs size\n"
"#  fD inverse sqrt of size\n"
"float32 fx\n"
"float32 fy\n"
"float32 fs\n"
"float32 fD\n"
;
  }

  static const char* value(const ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.fx);
      stream.next(m.fy);
      stream.next(m.fs);
      stream.next(m.fD);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imageFeaturesIBVS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::imageFeaturesIBVS_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "fx: ";
    Printer<float>::stream(s, indent + "  ", v.fx);
    s << indent << "fy: ";
    Printer<float>::stream(s, indent + "  ", v.fy);
    s << indent << "fs: ";
    Printer<float>::stream(s, indent + "  ", v.fs);
    s << indent << "fD: ";
    Printer<float>::stream(s, indent + "  ", v.fD);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_IMAGEFEATURESIBVS_H
