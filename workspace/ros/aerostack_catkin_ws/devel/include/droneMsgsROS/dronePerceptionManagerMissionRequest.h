// Generated by gencpp from file droneMsgsROS/dronePerceptionManagerMissionRequest.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_DRONEPERCEPTIONMANAGERMISSIONREQUEST_H
#define DRONEMSGSROS_MESSAGE_DRONEPERCEPTIONMANAGERMISSIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct dronePerceptionManagerMissionRequest_
{
  typedef dronePerceptionManagerMissionRequest_<ContainerAllocator> Type;

  dronePerceptionManagerMissionRequest_()
    : drone_id(0)
    , object_pose()
    , submission_type(0)  {
    }
  dronePerceptionManagerMissionRequest_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , object_pose(_alloc)
    , submission_type(0)  {
  (void)_alloc;
    }



   typedef uint16_t _drone_id_type;
  _drone_id_type drone_id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _object_pose_type;
  _object_pose_type object_pose;

   typedef int32_t _submission_type_type;
  _submission_type_type submission_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PICK_OBJECT)
  #undef PICK_OBJECT
#endif
#if defined(_WIN32) && defined(RELEASE_OBJECT)
  #undef RELEASE_OBJECT
#endif

  enum {
    PICK_OBJECT = 1,
    RELEASE_OBJECT = 2,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct dronePerceptionManagerMissionRequest_

typedef ::droneMsgsROS::dronePerceptionManagerMissionRequest_<std::allocator<void> > dronePerceptionManagerMissionRequest;

typedef boost::shared_ptr< ::droneMsgsROS::dronePerceptionManagerMissionRequest > dronePerceptionManagerMissionRequestPtr;
typedef boost::shared_ptr< ::droneMsgsROS::dronePerceptionManagerMissionRequest const> dronePerceptionManagerMissionRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator1> & lhs, const ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.object_pose == rhs.object_pose &&
    lhs.submission_type == rhs.submission_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator1> & lhs, const ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c23f643ccf0ddd7fbed26394a1b83f7";
  }

  static const char* value(const ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c23f643ccf0ddd7ULL;
  static const uint64_t static_value2 = 0xfbed26394a1b83f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/dronePerceptionManagerMissionRequest";
  }

  static const char* value(const ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#time stamp\n"
"#Header header\n"
"\n"
"uint16 drone_id\n"
"\n"
"geometry_msgs/Pose object_pose\n"
"\n"
"#SubMission type\n"
"int32 submission_type\n"
"\n"
"int32 PICK_OBJECT                   = 1\n"
"int32 RELEASE_OBJECT                = 2\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.object_pose);
      stream.next(m.submission_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dronePerceptionManagerMissionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::dronePerceptionManagerMissionRequest_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "object_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.object_pose);
    s << indent << "submission_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.submission_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_DRONEPERCEPTIONMANAGERMISSIONREQUEST_H
