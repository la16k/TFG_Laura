// Generated by gencpp from file droneMsgsROS/actionData.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_ACTIONDATA_H
#define DRONEMSGSROS_MESSAGE_ACTIONDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <droneMsgsROS/actionArguments.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct actionData_
{
  typedef actionData_<ContainerAllocator> Type;

  actionData_()
    : time()
    , ack(false)
    , mpAction(0)
    , arguments()  {
    }
  actionData_(const ContainerAllocator& _alloc)
    : time()
    , ack(false)
    , mpAction(0)
    , arguments(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _time_type;
  _time_type time;

   typedef uint8_t _ack_type;
  _ack_type ack;

   typedef int32_t _mpAction_type;
  _mpAction_type mpAction;

   typedef std::vector< ::droneMsgsROS::actionArguments_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::droneMsgsROS::actionArguments_<ContainerAllocator> >::other >  _arguments_type;
  _arguments_type arguments;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TAKE_OFF)
  #undef TAKE_OFF
#endif
#if defined(_WIN32) && defined(HOVER)
  #undef HOVER
#endif
#if defined(_WIN32) && defined(LAND)
  #undef LAND
#endif
#if defined(_WIN32) && defined(STABILIZE)
  #undef STABILIZE
#endif
#if defined(_WIN32) && defined(MOVE)
  #undef MOVE
#endif
#if defined(_WIN32) && defined(GO_TO_POINT)
  #undef GO_TO_POINT
#endif
#if defined(_WIN32) && defined(ROTATE_YAW)
  #undef ROTATE_YAW
#endif
#if defined(_WIN32) && defined(FLIP)
  #undef FLIP
#endif
#if defined(_WIN32) && defined(FLIP_RIGHT)
  #undef FLIP_RIGHT
#endif
#if defined(_WIN32) && defined(FLIP_LEFT)
  #undef FLIP_LEFT
#endif
#if defined(_WIN32) && defined(FLIP_FRONT)
  #undef FLIP_FRONT
#endif
#if defined(_WIN32) && defined(FLIP_BACK)
  #undef FLIP_BACK
#endif
#if defined(_WIN32) && defined(FOLLOW_IMAGE)
  #undef FOLLOW_IMAGE
#endif
#if defined(_WIN32) && defined(APPROACH_POINT)
  #undef APPROACH_POINT
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    TAKE_OFF = 1,
    HOVER = 2,
    LAND = 3,
    STABILIZE = 4,
    MOVE = 5,
    GO_TO_POINT = 6,
    ROTATE_YAW = 7,
    FLIP = 8,
    FLIP_RIGHT = 9,
    FLIP_LEFT = 10,
    FLIP_FRONT = 11,
    FLIP_BACK = 12,
    FOLLOW_IMAGE = 13,
    APPROACH_POINT = 14,
    UNKNOWN = 100,
  };


  typedef boost::shared_ptr< ::droneMsgsROS::actionData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::actionData_<ContainerAllocator> const> ConstPtr;

}; // struct actionData_

typedef ::droneMsgsROS::actionData_<std::allocator<void> > actionData;

typedef boost::shared_ptr< ::droneMsgsROS::actionData > actionDataPtr;
typedef boost::shared_ptr< ::droneMsgsROS::actionData const> actionDataConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::actionData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::actionData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::actionData_<ContainerAllocator1> & lhs, const ::droneMsgsROS::actionData_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.ack == rhs.ack &&
    lhs.mpAction == rhs.mpAction &&
    lhs.arguments == rhs.arguments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::actionData_<ContainerAllocator1> & lhs, const ::droneMsgsROS::actionData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::actionData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::actionData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::actionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::actionData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::actionData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::actionData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::actionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c71ab74195062ddbcd92e3558e92ae1e";
  }

  static const char* value(const ::droneMsgsROS::actionData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc71ab74195062ddbULL;
  static const uint64_t static_value2 = 0xcd92e3558e92ae1eULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::actionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/actionData";
  }

  static const char* value(const ::droneMsgsROS::actionData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::actionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#time\n"
"time time\n"
"\n"
"#ack\n"
"bool ack\n"
"\n"
"#MissionPlanner action\n"
"int32 mpAction\n"
"\n"
"int32 TAKE_OFF                   = 1\n"
"int32 HOVER                      = 2\n"
"int32 LAND                       = 3\n"
"int32 STABILIZE                  = 4\n"
"int32 MOVE                       = 5\n"
"int32 GO_TO_POINT                = 6\n"
"int32 ROTATE_YAW                 = 7\n"
"int32 FLIP                       = 8\n"
"int32 FLIP_RIGHT                 = 9\n"
"int32 FLIP_LEFT                  = 10\n"
"int32 FLIP_FRONT                 = 11\n"
"int32 FLIP_BACK                  = 12\n"
"int32 FOLLOW_IMAGE               = 13\n"
"int32 APPROACH_POINT             = 14\n"
"\n"
"int32 UNKNOWN                    = 100\n"
"\n"
"#Arguments\n"
"actionArguments[] arguments\n"
"================================================================================\n"
"MSG: droneMsgsROS/actionArguments\n"
"#Name of the argument that is going to be passed.\n"
"int32 argumentName\n"
"\n"
"int32 DURATION                 = 1\n"
"int32 DESTINATION              = 2\n"
"int32 ROTATION                 = 3\n"
"int32 PRECISION                = 4\n"
"\n"
"#Numerical value\n"
"float64[] value\n"
;
  }

  static const char* value(const ::droneMsgsROS::actionData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::actionData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.ack);
      stream.next(m.mpAction);
      stream.next(m.arguments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actionData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::actionData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::actionData_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "ack: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ack);
    s << indent << "mpAction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mpAction);
    s << indent << "arguments[]" << std::endl;
    for (size_t i = 0; i < v.arguments.size(); ++i)
    {
      s << indent << "  arguments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::droneMsgsROS::actionArguments_<ContainerAllocator> >::stream(s, indent + "    ", v.arguments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_ACTIONDATA_H
