// Generated by gencpp from file droneMsgsROS/ConsultIncompatibleBehaviorsResponse.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_CONSULTINCOMPATIBLEBEHAVIORSRESPONSE_H
#define DRONEMSGSROS_MESSAGE_CONSULTINCOMPATIBLEBEHAVIORSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <droneMsgsROS/BehaviorCommand.h>

namespace droneMsgsROS
{
template <class ContainerAllocator>
struct ConsultIncompatibleBehaviorsResponse_
{
  typedef ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> Type;

  ConsultIncompatibleBehaviorsResponse_()
    : incompatible_behaviors()
    , uids()  {
    }
  ConsultIncompatibleBehaviorsResponse_(const ContainerAllocator& _alloc)
    : incompatible_behaviors(_alloc)
    , uids(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::droneMsgsROS::BehaviorCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::droneMsgsROS::BehaviorCommand_<ContainerAllocator> >::other >  _incompatible_behaviors_type;
  _incompatible_behaviors_type incompatible_behaviors;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _uids_type;
  _uids_type uids;





  typedef boost::shared_ptr< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ConsultIncompatibleBehaviorsResponse_

typedef ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<std::allocator<void> > ConsultIncompatibleBehaviorsResponse;

typedef boost::shared_ptr< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse > ConsultIncompatibleBehaviorsResponsePtr;
typedef boost::shared_ptr< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse const> ConsultIncompatibleBehaviorsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator1> & lhs, const ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.incompatible_behaviors == rhs.incompatible_behaviors &&
    lhs.uids == rhs.uids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator1> & lhs, const ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a04415284075eeb7517e6058ab759ebf";
  }

  static const char* value(const ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa04415284075eeb7ULL;
  static const uint64_t static_value2 = 0x517e6058ab759ebfULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/ConsultIncompatibleBehaviorsResponse";
  }

  static const char* value(const ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BehaviorCommand[] incompatible_behaviors\n"
"float64[] uids\n"
"\n"
"\n"
"================================================================================\n"
"MSG: droneMsgsROS/BehaviorCommand\n"
"# A behavior command is a request to execute a behavior with a set of arguments\n"
"\n"
"string name       # behavior name\n"
"string arguments  # arguments of the behavior\n"
;
  }

  static const char* value(const ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.incompatible_behaviors);
      stream.next(m.uids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConsultIncompatibleBehaviorsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::ConsultIncompatibleBehaviorsResponse_<ContainerAllocator>& v)
  {
    s << indent << "incompatible_behaviors[]" << std::endl;
    for (size_t i = 0; i < v.incompatible_behaviors.size(); ++i)
    {
      s << indent << "  incompatible_behaviors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::droneMsgsROS::BehaviorCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.incompatible_behaviors[i]);
    }
    s << indent << "uids[]" << std::endl;
    for (size_t i = 0; i < v.uids.size(); ++i)
    {
      s << indent << "  uids[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.uids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_CONSULTINCOMPATIBLEBEHAVIORSRESPONSE_H
