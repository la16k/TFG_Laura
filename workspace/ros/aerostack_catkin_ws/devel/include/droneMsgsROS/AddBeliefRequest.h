// Generated by gencpp from file droneMsgsROS/AddBeliefRequest.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_ADDBELIEFREQUEST_H
#define DRONEMSGSROS_MESSAGE_ADDBELIEFREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct AddBeliefRequest_
{
  typedef AddBeliefRequest_<ContainerAllocator> Type;

  AddBeliefRequest_()
    : multivalued(false)
    , belief_expression()  {
    }
  AddBeliefRequest_(const ContainerAllocator& _alloc)
    : multivalued(false)
    , belief_expression(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _multivalued_type;
  _multivalued_type multivalued;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _belief_expression_type;
  _belief_expression_type belief_expression;





  typedef boost::shared_ptr< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddBeliefRequest_

typedef ::droneMsgsROS::AddBeliefRequest_<std::allocator<void> > AddBeliefRequest;

typedef boost::shared_ptr< ::droneMsgsROS::AddBeliefRequest > AddBeliefRequestPtr;
typedef boost::shared_ptr< ::droneMsgsROS::AddBeliefRequest const> AddBeliefRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator1> & lhs, const ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator2> & rhs)
{
  return lhs.multivalued == rhs.multivalued &&
    lhs.belief_expression == rhs.belief_expression;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator1> & lhs, const ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c27a6b4ac49d001bae885a16672bc5ae";
  }

  static const char* value(const ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc27a6b4ac49d001bULL;
  static const uint64_t static_value2 = 0xae885a16672bc5aeULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/AddBeliefRequest";
  }

  static const char* value(const ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SERVICE TYPE: AddBelief\n"
"# ------------------------------------------------------------------------------\n"
"# This service adds a belief expression to the belief memory\n"
"\n"
"bool multivalued          # whether to keep clashing beliefs in the memory or not\n"
"string belief_expression  # belief expression to add to the memory\n"
;
  }

  static const char* value(const ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.multivalued);
      stream.next(m.belief_expression);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddBeliefRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::AddBeliefRequest_<ContainerAllocator>& v)
  {
    s << indent << "multivalued: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.multivalued);
    s << indent << "belief_expression: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.belief_expression);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_ADDBELIEFREQUEST_H
