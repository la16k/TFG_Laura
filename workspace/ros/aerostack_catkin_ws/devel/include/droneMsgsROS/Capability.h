// Generated by gencpp from file droneMsgsROS/Capability.msg
// DO NOT EDIT!


#ifndef DRONEMSGSROS_MESSAGE_CAPABILITY_H
#define DRONEMSGSROS_MESSAGE_CAPABILITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droneMsgsROS
{
template <class ContainerAllocator>
struct Capability_
{
  typedef Capability_<ContainerAllocator> Type;

  Capability_()
    : name()
    , basic(false)
    , processes()  {
    }
  Capability_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , basic(false)
    , processes(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _basic_type;
  _basic_type basic;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _processes_type;
  _processes_type processes;





  typedef boost::shared_ptr< ::droneMsgsROS::Capability_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droneMsgsROS::Capability_<ContainerAllocator> const> ConstPtr;

}; // struct Capability_

typedef ::droneMsgsROS::Capability_<std::allocator<void> > Capability;

typedef boost::shared_ptr< ::droneMsgsROS::Capability > CapabilityPtr;
typedef boost::shared_ptr< ::droneMsgsROS::Capability const> CapabilityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droneMsgsROS::Capability_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droneMsgsROS::Capability_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droneMsgsROS::Capability_<ContainerAllocator1> & lhs, const ::droneMsgsROS::Capability_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.basic == rhs.basic &&
    lhs.processes == rhs.processes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droneMsgsROS::Capability_<ContainerAllocator1> & lhs, const ::droneMsgsROS::Capability_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droneMsgsROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::Capability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droneMsgsROS::Capability_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::Capability_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droneMsgsROS::Capability_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::Capability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droneMsgsROS::Capability_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droneMsgsROS::Capability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7575274dc7d37b1208cb0ee1cc6fa20";
  }

  static const char* value(const ::droneMsgsROS::Capability_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7575274dc7d37b1ULL;
  static const uint64_t static_value2 = 0x208cb0ee1cc6fa20ULL;
};

template<class ContainerAllocator>
struct DataType< ::droneMsgsROS::Capability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droneMsgsROS/Capability";
  }

  static const char* value(const ::droneMsgsROS::Capability_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droneMsgsROS::Capability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A capability is a group of processes\n"
"\n"
"string name         # capability name\n"
"bool basic          # a capability is basic if it is always active\n"
"string[] processes  # list of names of processes that belong to the capability\n"
;
  }

  static const char* value(const ::droneMsgsROS::Capability_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droneMsgsROS::Capability_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.basic);
      stream.next(m.processes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Capability_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droneMsgsROS::Capability_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droneMsgsROS::Capability_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "basic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.basic);
    s << indent << "processes[]" << std::endl;
    for (size_t i = 0; i < v.processes.size(); ++i)
    {
      s << indent << "  processes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.processes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONEMSGSROS_MESSAGE_CAPABILITY_H
